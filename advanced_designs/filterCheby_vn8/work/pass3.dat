    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;KCPSM3 Program - SPI Control of Amplifier and A/D converter and D/A on Spartan-3E Starter Kit.
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Modded by Theja (theja@mit.edu)
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;v n1: ADC and DAC being used simultaneously. Problem with level shifting and scaling.
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Original templates by
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Ken Chapman - Xilinx Ltd
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Version v1.00 - 21th December 2005
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;As well as the port connections vital to communication with the UART and the SPI
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;FLASH memory, there are additional port connections used to disable the other
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;devices sharing the SPI bus on the Starter Kit board. Although these could have been
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;controlled at the hardware level, they are included in this code to aid
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;future investigations of communication with the other SPI devices using PicoBlaze.
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Port definitions
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SPI_control_port
   OPERAND2-08
    COMMENT-;SPI clock and chip selects
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SPI_sck
   OPERAND2-01
    COMMENT-;                  SCK - bit0
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SPI_rom_cs
   OPERAND2-02
    COMMENT-;    serial rom select - bit1
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SPI_spare_control
   OPERAND2-04
    COMMENT-;                spare - bit2
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SPI_amp_cs
   OPERAND2-08
    COMMENT-;     amplifier select - bit3
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SPI_adc_conv
   OPERAND2-10
    COMMENT-;          A/D convert - bit4
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SPI_dac_cs
   OPERAND2-20
    COMMENT-;           D/A select - bit5
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SPI_amp_shdn
   OPERAND2-40
    COMMENT-;       amplifier SHDN - bit6
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SPI_dac_clr
   OPERAND2-80
    COMMENT-;            D/A clear - bit7
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SPI_output_port
   OPERAND2-04
    COMMENT-;SPI data output
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SPI_sdo
   OPERAND2-80
    COMMENT-;   SDO - bit7
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SPI_input_port
   OPERAND2-01
    COMMENT-;SPI data input
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SPI_sdi
   OPERAND2-80
    COMMENT-;             SDI - bit7
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SPI_amp_sdi
   OPERAND2-40
    COMMENT-;   amplifier SDI - bit6
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LED_port
   OPERAND2-80
    COMMENT-;8 simple LEDs
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LED0
   OPERAND2-01
    COMMENT-;     LED 0 - bit0
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LED1
   OPERAND2-02
    COMMENT-;         1 - bit1
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LED2
   OPERAND2-04
    COMMENT-;         2 - bit2
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LED3
   OPERAND2-08
    COMMENT-;         3 - bit3
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LED4
   OPERAND2-10
    COMMENT-;         4 - bit4
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LED5
   OPERAND2-20
    COMMENT-;         5 - bit5
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LED6
   OPERAND2-40
    COMMENT-;         6 - bit6
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LED7
   OPERAND2-80
    COMMENT-;         7 - bit7
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-switch_port
   OPERAND2-00
    COMMENT-;Read switches and press buttons
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-BTN_north
   OPERAND2-01
    COMMENT-;  Buttons     North - bit0
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-BTN_east
   OPERAND2-02
    COMMENT-;               East - bit1
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-BTN_south
   OPERAND2-04
    COMMENT-;              South - bit2
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-BTN_west
   OPERAND2-08
    COMMENT-;               West - bit3
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-switch0
   OPERAND2-10
    COMMENT-;  Switches        0 - bit4
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-switch1
   OPERAND2-20
    COMMENT-;                  1 - bit5
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-switch2
   OPERAND2-40
    COMMENT-;                  2 - bit6
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-switch3
   OPERAND2-80
    COMMENT-;                  3 - bit7
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;;;;;;;;;;;;;;new input port added by theja
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-int_check_port
   OPERAND2-11
    COMMENT-; read which interrupt occured.
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-int_is_cheby
   OPERAND2-01
    COMMENT-; bit0 - Chebyshev interrupt occured.
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;;;;;;;;;;;;;;new input port added by theja ends
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;LCD interface ports
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The master enable signal is not used by the LCD display itself
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;but may be required to confirm that LCD communication is active.
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;This is required on the Spartan-3E Starter Kit if the StrataFLASH
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;is used because it shares the same data pins and conflicts must be avoided.
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LCD_output_port
   OPERAND2-40
    COMMENT-;LCD character module output data and control
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LCD_E
   OPERAND2-01
    COMMENT-;   active High Enable        E - bit0
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LCD_RW
   OPERAND2-02
    COMMENT-;   Read=1 Write=0           RW - bit1
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LCD_RS
   OPERAND2-04
    COMMENT-;   Instruction=0 Data=1     RS - bit2
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LCD_drive
   OPERAND2-08
    COMMENT-;   Master enable (active High) - bit3
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LCD_DB4
   OPERAND2-10
    COMMENT-;   4-bit              Data DB4 - bit4
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LCD_DB5
   OPERAND2-20
    COMMENT-;   interface          Data DB5 - bit5
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LCD_DB6
   OPERAND2-40
    COMMENT-;                      Data DB6 - bit6
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LCD_DB7
   OPERAND2-80
    COMMENT-;                      Data DB7 - bit7
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LCD_input_port
   OPERAND2-02
    COMMENT-;LCD character module input data
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LCD_read_spare0
   OPERAND2-01
    COMMENT-;    Spare bits               - bit0
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LCD_read_spare1
   OPERAND2-02
    COMMENT-;    are zero                 - bit1
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LCD_read_spare2
   OPERAND2-04
    COMMENT-;                             - bit2
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LCD_read_spare3
   OPERAND2-08
    COMMENT-;                             - bit3
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LCD_read_DB4
   OPERAND2-10
    COMMENT-;    4-bit           Data DB4 - bit4
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LCD_read_DB5
   OPERAND2-20
    COMMENT-;    interface       Data DB5 - bit5
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LCD_read_DB6
   OPERAND2-40
    COMMENT-;                    Data DB6 - bit6
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LCD_read_DB7
   OPERAND2-80
    COMMENT-;                    Data DB7 - bit7
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Special Register usage
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Scratch Pad Memory Locations
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Values read from the A/D converter
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-ADC0_lsb
   OPERAND2-00
    COMMENT-;ADC Channel 0 value LS-Byte
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-ADC0_msb
   OPERAND2-01
    COMMENT-;                    MS-Byte
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;CONSTANT ADC1_lsb, 02               ;ADC Channel 1 value LS-Byte
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;CONSTANT ADC1_msb, 03               ;                    MS-Byte
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Amplifier gain settings.
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Stored value is the 4-bit code for gain setting
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;  Code  1   2   3    4     5    6     7
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;  Gain -1  -2  -5  -10   -20  -50  -100
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-amp_A_gain
   OPERAND2-04
    COMMENT-;Amplifier A gain value
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-amp_B_gain
   OPERAND2-05
    COMMENT-;Amplifier B gain value
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Sample counter used to give activity indication on LEDs
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;CONSTANT sample_count, 06           ;8-bit counter LS-Byte. Theja: redundant.
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-decimal0
   OPERAND2-07
    COMMENT-;5 digit decimal value
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-decimal1
   OPERAND2-08
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-decimal2
   OPERAND2-09
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-decimal3
   OPERAND2-0A
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-decimal4
   OPERAND2-0B
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;;;;;;;;;;;;;;thejas;;;;;;;;;;;;;;;;;;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Values to be written to the D/A converter
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-chan_A_lsb
   OPERAND2-0C
    COMMENT-;Channel C value LS-Byte
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-chan_A_msb
   OPERAND2-0E
    COMMENT-;                MS-Byte
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;;;;;;;;;;;;;;thejas;;;;;;;;;;;;;;;;;;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Useful data constants
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-VREF_lsb
   OPERAND2-72
    COMMENT-;Reference voltage in milli-volts
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-VREF_msb
   OPERAND2-06
    COMMENT-;Nominal value 1.65v so value is 1650 (0672 hex)
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Constant to define a software delay of 1us. This must be adjusted to reflect the
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;calculation highly predictable. The '6' in the following equation even allows for
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;'CALL delay_1us' instruction in the initiating code.
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;For clock rates below 10MHz the value of 1 must be used and the operation will
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;become lower than intended.
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-delay_1us_constant
   OPERAND2-0B
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;ASCII table
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_a
   OPERAND2-61
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_b
   OPERAND2-62
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_c
   OPERAND2-63
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_d
   OPERAND2-64
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_e
   OPERAND2-65
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_f
   OPERAND2-66
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_g
   OPERAND2-67
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_h
   OPERAND2-68
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_i
   OPERAND2-69
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_j
   OPERAND2-6A
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_k
   OPERAND2-6B
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_l
   OPERAND2-6C
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_m
   OPERAND2-6D
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_n
   OPERAND2-6E
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_o
   OPERAND2-6F
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_p
   OPERAND2-70
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_q
   OPERAND2-71
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_r
   OPERAND2-72
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_s
   OPERAND2-73
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_t
   OPERAND2-74
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_u
   OPERAND2-75
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_v
   OPERAND2-76
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_w
   OPERAND2-77
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_x
   OPERAND2-78
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_y
   OPERAND2-79
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_z
   OPERAND2-7A
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_A
   OPERAND2-41
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_B
   OPERAND2-42
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_C
   OPERAND2-43
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_D
   OPERAND2-44
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_E
   OPERAND2-45
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_F
   OPERAND2-46
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_G
   OPERAND2-47
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_H
   OPERAND2-48
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_I
   OPERAND2-49
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_J
   OPERAND2-4A
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_K
   OPERAND2-4B
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_L
   OPERAND2-4C
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_M
   OPERAND2-4D
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_N
   OPERAND2-4E
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_O
   OPERAND2-4F
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_P
   OPERAND2-50
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_Q
   OPERAND2-51
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_R
   OPERAND2-52
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_S
   OPERAND2-53
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_T
   OPERAND2-54
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_U
   OPERAND2-55
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_V
   OPERAND2-56
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_W
   OPERAND2-57
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_X
   OPERAND2-58
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_Y
   OPERAND2-59
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_Z
   OPERAND2-5A
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_0
   OPERAND2-30
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_1
   OPERAND2-31
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_2
   OPERAND2-32
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_3
   OPERAND2-33
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_4
   OPERAND2-34
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_5
   OPERAND2-35
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_6
   OPERAND2-36
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_7
   OPERAND2-37
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_8
   OPERAND2-38
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_9
   OPERAND2-39
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_colon
   OPERAND2-3A
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_stop
   OPERAND2-2E
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_semi_colon
   OPERAND2-3B
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_minus
   OPERAND2-2D
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_divide
   OPERAND2-2F
    COMMENT-;'/'
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_plus
   OPERAND2-2B
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_comma
   OPERAND2-2C
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_less_than
   OPERAND2-3C
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_greater_than
   OPERAND2-3E
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_equals
   OPERAND2-3D
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_space
   OPERAND2-20
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_CR
   OPERAND2-0D
    COMMENT-;carriage return
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_question
   OPERAND2-3F
    COMMENT-;'?'
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_dollar
   OPERAND2-24
    COMMENT-
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_exclaim
   OPERAND2-21
    COMMENT-;'!'
    ADDRESS-000
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_BS
   OPERAND2-08
    COMMENT-;Back Space command character
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Initialise the system
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-000
      LABEL-cold_start
INSTRUCTION-CALL
   OPERAND1-SPI_init
   OPERAND2-
    COMMENT-;initialise SPI bus ports
    ADDRESS-001
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_reset
   OPERAND2-
    COMMENT-;initialise LCD display
    ADDRESS-002
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-002
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;;;;;;;Write some message to LCD display
    ADDRESS-002
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-25
    COMMENT-;Line 2 position 5; in hex actually.
    ADDRESS-003
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_cursor
   OPERAND2-
    COMMENT-
    ADDRESS-004
      LABEL-
INSTRUCTION-CALL
   OPERAND1-disp_Filter
   OPERAND2-
    COMMENT-; could display your name too.
    ADDRESS-005
      LABEL-
INSTRUCTION-CALL
   OPERAND1-delay_1s
   OPERAND2-
    COMMENT-;wait 1 second
    ADDRESS-006
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_clear
   OPERAND2-
    COMMENT-;Clear display
    ADDRESS-007
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;Done writing some message to LCD display
    ADDRESS-007
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-007
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;;;;;;;;;;;;;;thejas;;;;;;;;;;;;;;;;;;
    ADDRESS-007
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-00
    COMMENT-
    ADDRESS-008
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s0
   OPERAND2-chan_A_lsb
    COMMENT-;clear all internal D/A values
    ADDRESS-009
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s0
   OPERAND2-chan_A_msb
    COMMENT-;clear all internal D/A values
    ADDRESS-00A
      LABEL-
INSTRUCTION-CALL
   OPERAND1-dac_reset
   OPERAND2-
    COMMENT-;reset D/A converter on all channels
    ADDRESS-00B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;;;;;;;;;;;;;;thejas;;;;;;;;;;;;;;;;;;
    ADDRESS-00B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-00B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;;;;;;;;;;Set a gain value for the ADC
    ADDRESS-00B
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-01
    COMMENT-;set initial amplifier gain to 1 on both channels
    ADDRESS-00C
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s0
   OPERAND2-amp_A_gain
    COMMENT-;see encoding above. 01 in hex represents a gain of -1.
    ADDRESS-00D
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s0
   OPERAND2-amp_B_gain
    COMMENT-
    ADDRESS-00E
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-new_gain_set
   OPERAND2-
    COMMENT-;set, display the initial gain and enable interrupts
    ADDRESS-00F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;Done Setting a gain value for the ADC
    ADDRESS-00F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-00F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-00F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The main body
    ADDRESS-00F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;of the program waits for an interrupt to occur. The interrupt updates all four
    ADDRESS-00F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;analogue outputs with values stored in scratch pad memory. This takes approximately
    ADDRESS-00F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;58us of the 125us available between interrupts. The main program then prepares
    ADDRESS-00F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;new values for the analogue outputs (in less than 67us) before waiting for the
    ADDRESS-00F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;next interrupt.
    ADDRESS-00F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-00F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-00F
      LABEL-warm_start
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-FF
    COMMENT-;flag set and wait for interrupt to be serviced
    ADDRESS-010
      LABEL-
INSTRUCTION-ENABLE
   OPERAND1-INTERRUPT
   OPERAND2-
    COMMENT-;normal operation
    ADDRESS-011
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-011
      LABEL-wait_int
INSTRUCTION-COMPARE
   OPERAND1-sF
   OPERAND2-FF
    COMMENT-;wait for interrupt
    ADDRESS-012
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-wait_int
    COMMENT-;interrupt clears the flag
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Convert A/D channel 0 value to decimal voltage
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The 14-bit signed value from the A/D (sign extended to 16-bits)
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;relates to a voltage in the range -1.25v to +1.25v at the input
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;to the A/D converter relative to the 1.65v mid-rail reference point.
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The 14-bit value can be translated into the -1.25v to +1.25v using the
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;simple equation...
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   ADin = AD_value x 1.25/8192  ... .. btw; 8192 means 2^13; 14 bit 2's complement
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;It is possible to scale the AD_value by 1.25/8192 using a fixed point
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;representation.
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;However, it is also possible to scale it by another factor at the
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;same time which nicely converts to a binary value which is readily
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;converted to decimal. This can be achieved by example...
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;For an input to the A/D converter of +1.25v relative to the reference,
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;the A/D will output the maximum conversion of 1FFF (+8191).
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;In this case we would like to have the result value +1.250v which can be represented
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;by the integer value +1250 with appropiate positioning of the decimal point.
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The constant to achieve this conversion is +1250/8191=+0.152606...
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Also a number requiring fixed point representation but how many bits to use?
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The way to resolve this is to realise that a multiplication will be
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;performed and it would be nice if the +1250 result ended up in a register pair.
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;So if we perform a 16x16-bit multiplication such that the upper 16-bits of
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;the 32-bit result is the required value, then everything will resolve itself.
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Hence the constant required is actually (1250x(2^16))/8191=+10001 (2711 hex).
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Using the example 1FFF x 2711 = 04E1F8EF
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   of which the upper 16-bits = 04E1 (+1249 decimal)
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Likewise the other limit case is E000 x 2711 = FB1DE000
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   of which the upper 16-bits = FB1D (-1251 decimal)
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The values can be made perfect by rounding before truncation
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-013
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;;;;;;;;;;;;; new branching logic added by theja
    ADDRESS-013
      LABEL-
INSTRUCTION-INPUT
   OPERAND1-s0
   OPERAND2-int_check_port
    COMMENT-
    ADDRESS-014
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-014
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-014
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;compare the input word (8 bit) with 00hex, if this is equal, then
    ADDRESS-014
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; the interrupt was of the chebyshev type so continue with the processing below
    ADDRESS-014
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; if this was of the equidistant type, only do the reading from verilog.
    ADDRESS-014
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; here redundantly adc sampling happens, but we don't use that sample value.
    ADDRESS-014
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-00
    COMMENT-
    ADDRESS-015
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-Only_Equidistant
    COMMENT-
    ADDRESS-016
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-016
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-016
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-016
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-016
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s8
   OPERAND2-LED_port
    COMMENT-
    ADDRESS-017
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s9
   OPERAND2-LED_port
    COMMENT-;theja: sending to the wrapper verilog IMPORTANT
    ADDRESS-018
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; sending is done only in the chebyshev interrupt case.
    ADDRESS-018
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-018
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-018
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-018
      LABEL-
INSTRUCTION-CALL
   OPERAND1-delay_40us
   OPERAND2-
    COMMENT-; is the 30 cycle slowdown being taken care of?
    ADDRESS-019
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-019
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-019
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-019
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;;;;;;;;;;;;; new branching logic added by theja ends
    ADDRESS-019
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-019
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-019
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-019
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-019
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s2
   OPERAND2-ADC0_lsb
    COMMENT-;Read A/D channel 0 value
    ADDRESS-01A
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s3
   OPERAND2-ADC0_msb
    COMMENT-
    ADDRESS-01B
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-11
    COMMENT-;scaling value for input to A/D converter
    ADDRESS-01C
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-27
    COMMENT-
    ADDRESS-01D
      LABEL-
INSTRUCTION-CALL
   OPERAND1-mult_16x16s
   OPERAND2-
    COMMENT-;[s7,s6,s5,s4]=[s3,s2]x[s1,s0]
    ADDRESS-01E
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s5
   OPERAND2-
    COMMENT-;round value before truncation
    ADDRESS-01F
      LABEL-
INSTRUCTION-ADDCY
   OPERAND1-s6
   OPERAND2-00
    COMMENT-
    ADDRESS-020
      LABEL-
INSTRUCTION-ADDCY
   OPERAND1-s7
   OPERAND2-00
    COMMENT-
    ADDRESS-021
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-021
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The register pair [s7,s6] now holds the binary value
    ADDRESS-021
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;representing the input level to the A/D converter in milli-volts.
    ADDRESS-021
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The code for displaying this on the LCD is removed. In case you want to do this:
    ADDRESS-021
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;1. Negative values need to be converted to signed magnitude for display.
    ADDRESS-021
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;2. Use bcd conversion routine.
    ADDRESS-021
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-021
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The same fundamental technique can be used to convert the 14-bit
    ADDRESS-021
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;A/D value into the level at the VINA input except that two more factors
    ADDRESS-021
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;must be considered. VINA is the actual input voltage (not between +-1.25v)
    ADDRESS-021
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-021
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The first is that the amplifier inverts and has gain. Therefore the
    ADDRESS-021
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;VINA input level is opposite polarity and is a deviation
    ADDRESS-021
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;from the mid rail 1.65v reference.
    ADDRESS-021
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Secondly, to display the actual voltage level at the VINA terminal
    ADDRESS-021
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;the 1.65v offset must be added.
    ADDRESS-021
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-021
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The voltage at the VINA input is therefore...
    ADDRESS-021
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-021
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   VINA = [AD_value x (1.25/(8192))]+1.65
    ADDRESS-021
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-021
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Following the same methodology as for the A/D value, it means that there
    ADDRESS-021
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;is a set of scaling factors to deal with the negative gain values.
    ADDRESS-021
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-021
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; K = (+1250 x (2^16)) / (8191 x G)
    ADDRESS-021
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-021
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;        G             K     (K Hex)
    ADDRESS-021
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;       -1          -10001   (D8EF)
    ADDRESS-021
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-021
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s2
   OPERAND2-ADC0_lsb
    COMMENT-;Read A/D channel 0 value
    ADDRESS-022
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s3
   OPERAND2-ADC0_msb
    COMMENT-
    ADDRESS-023
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s4
   OPERAND2-amp_A_gain
    COMMENT-;read A gain and select appropiate gain setting
    ADDRESS-024
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-EF
    COMMENT-;scaling value for amplifier gain of -1
    ADDRESS-025
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-D8
    COMMENT-
    ADDRESS-026
      LABEL-
INSTRUCTION-CALL
   OPERAND1-mult_16x16s
   OPERAND2-
    COMMENT-;[s7,s6,s5,s4]=[s3,s2]x[s1,s0]
    ADDRESS-027
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s5
   OPERAND2-
    COMMENT-;round value before truncation
    ADDRESS-028
      LABEL-
INSTRUCTION-ADDCY
   OPERAND1-s6
   OPERAND2-00
    COMMENT-
    ADDRESS-029
      LABEL-
INSTRUCTION-ADDCY
   OPERAND1-s7
   OPERAND2-00
    COMMENT-
    ADDRESS-02A
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s6
   OPERAND2-VREF_lsb
    COMMENT-;add 1.65v offset represented at 1650 (0672 hex)
    ADDRESS-02B
      LABEL-
INSTRUCTION-ADDCY
   OPERAND1-s7
   OPERAND2-VREF_msb
    COMMENT-
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The register pair [s7,s6] now holds the binary value
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;representing the VINA input level in milli-volts.
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;This must be a positive value due to the offset of 1.65v
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;being greater than the maximum relative range of -1.25v to +1.25v.
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;If the A/D value is maximum negative (E000) or maximum positive (1FFF)
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;then an indication of the actual value being applied being greater or
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;less than that computed will be made.
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;FETCH s2, ADC0_lsb                  ;Read A/D channel 0 value
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;FETCH s3, ADC0_msb
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;thejas;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-02C
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-02C
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sC
   OPERAND2-00
    COMMENT-;channel A IMPORTANT INFORMATION ABOUT DAC CHANNEL
    ADDRESS-02D
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Skip_Only_Eq
   OPERAND2-
    COMMENT-
    ADDRESS-02E
      LABEL-Only_Equidistant
INSTRUCTION-LOAD
   OPERAND1-sC
   OPERAND2-01
    COMMENT-;channel B IMPORTANT INFORMATION ABOUT DAC CHANNEL
    ADDRESS-02F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The D/A converter has 4 channels. Specify which channel is to be set using
    ADDRESS-02F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;register sC as follows....
    ADDRESS-02F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   sC     Channel                 Nominal Voltage Range
    ADDRESS-02F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   00        A                       0 to 3.30v (or VREFAB)
    ADDRESS-02F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   01        B                       0 to 3.30v (or VREFAB)
    ADDRESS-02F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   02        C                       0 to 2.50v (or VREFCD)
    ADDRESS-02F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   03        D                       0 to 2.50v (or VREFCD)
    ADDRESS-02F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   0F        All channels            various as above.
    ADDRESS-02F
      LABEL-Skip_Only_Eq
INSTRUCTION-INPUT
   OPERAND1-s3
   OPERAND2-switch_port
    COMMENT-
    ADDRESS-030
      LABEL-
INSTRUCTION-INPUT
   OPERAND1-s2
   OPERAND2-switch_port
    COMMENT-
    ADDRESS-031
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s3
   OPERAND2-
    COMMENT-
    ADDRESS-032
      LABEL-
INSTRUCTION-SLA
   OPERAND1-s2
   OPERAND2-
    COMMENT-
    ADDRESS-033
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s3
   OPERAND2-
    COMMENT-
    ADDRESS-034
      LABEL-
INSTRUCTION-SLA
   OPERAND1-s2
   OPERAND2-
    COMMENT-
    ADDRESS-035
      LABEL-
INSTRUCTION-TEST
   OPERAND1-s2
   OPERAND2-80
    COMMENT-;test sign bit of value
    ADDRESS-036
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-neg_value_DAC
    COMMENT-;if negative, then [s2,s3] is actually positive, so add ref.
    ADDRESS-037
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;        ;Gain = -1, remember
    ADDRESS-037
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-80
    COMMENT-; represents 2703 in decimal.
    ADDRESS-038
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-00
    COMMENT-
    ADDRESS-039
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s1
   OPERAND2-s3
    COMMENT-
    ADDRESS-03A
      LABEL-
INSTRUCTION-SUBCY
   OPERAND1-s0
   OPERAND2-s2
    COMMENT-
    ADDRESS-03B
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s0
   OPERAND2-chan_A_msb
    COMMENT-;store value for D/A output
    ADDRESS-03C
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s1
   OPERAND2-chan_A_lsb
    COMMENT-
    ADDRESS-03D
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-dac_re_adc_value
   OPERAND2-
    COMMENT-
    ADDRESS-03E
      LABEL-neg_value_DAC
INSTRUCTION-XOR
   OPERAND1-s3
   OPERAND2-FF
    COMMENT-;take the 2's complement.
    ADDRESS-03F
      LABEL-
INSTRUCTION-XOR
   OPERAND1-s2
   OPERAND2-FF
    COMMENT-
    ADDRESS-040
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s3
   OPERAND2-01
    COMMENT-
    ADDRESS-041
      LABEL-
INSTRUCTION-ADDCY
   OPERAND1-s2
   OPERAND2-00
    COMMENT-
    ADDRESS-042
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;AND s2, 03      ; the first 6 bits should be zero??
    ADDRESS-042
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-80
    COMMENT-
    ADDRESS-043
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-00
    COMMENT-
    ADDRESS-044
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s1
   OPERAND2-s3
    COMMENT-
    ADDRESS-045
      LABEL-
INSTRUCTION-ADDCY
   OPERAND1-s0
   OPERAND2-s2
    COMMENT-
    ADDRESS-046
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s0
   OPERAND2-chan_A_msb
    COMMENT-;store value for D/A output
    ADDRESS-047
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s1
   OPERAND2-chan_A_lsb
    COMMENT-
    ADDRESS-048
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;there was the channel selection register setting over here (below label)... LOAD sC,00
    ADDRESS-048
      LABEL-dac_re_adc_value
INSTRUCTION-FETCH
   OPERAND1-sB
   OPERAND2-chan_A_msb
    COMMENT-;12-bit value, ;from some reg where adc val is stored
    ADDRESS-049
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-sA
   OPERAND2-chan_A_lsb
    COMMENT-;2 bytes
    ADDRESS-04A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;LOAD sB, 80
    ADDRESS-04A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;LOAD sA, 00
    ADDRESS-04A
      LABEL-
INSTRUCTION-SR0
   OPERAND1-sB
   OPERAND2-
    COMMENT-; shift 12-bit value right 4 places
    ADDRESS-04B
      LABEL-
INSTRUCTION-SRA
   OPERAND1-sA
   OPERAND2-
    COMMENT-
    ADDRESS-04C
      LABEL-
INSTRUCTION-SR0
   OPERAND1-sB
   OPERAND2-
    COMMENT-
    ADDRESS-04D
      LABEL-
INSTRUCTION-SRA
   OPERAND1-sA
   OPERAND2-
    COMMENT-
    ADDRESS-04E
      LABEL-
INSTRUCTION-SR0
   OPERAND1-sB
   OPERAND2-
    COMMENT-
    ADDRESS-04F
      LABEL-
INSTRUCTION-SRA
   OPERAND1-sA
   OPERAND2-
    COMMENT-
    ADDRESS-050
      LABEL-
INSTRUCTION-SR0
   OPERAND1-sB
   OPERAND2-
    COMMENT-
    ADDRESS-051
      LABEL-
INSTRUCTION-SRA
   OPERAND1-sA
   OPERAND2-
    COMMENT-
    ADDRESS-052
      LABEL-
INSTRUCTION-CALL
   OPERAND1-set_dac
   OPERAND2-
    COMMENT-;writing to the channel part
    ADDRESS-053
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;thejas;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-053
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-warm_start
   OPERAND2-
    COMMENT-
    ADDRESS-054
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-054
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-054
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-054
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Display voltage level at in the form X.XXX on the LCD at current cursor position
    ADDRESS-054
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-054
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-054
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Value to be displayed must be unsigned (positive) in the
    ADDRESS-054
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;[s7,s6] register pair. Only the lower 4 digits are displayed.
    ADDRESS-054
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-054
      LABEL-disp_volts
INSTRUCTION-CALL
   OPERAND1-integer16_to_BCD
   OPERAND2-
    COMMENT-;convert [s7,s6] to BCD in scratch pad memory
    ADDRESS-055
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s5
   OPERAND2-decimal3
    COMMENT-
    ADDRESS-056
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s5
   OPERAND2-30
    COMMENT-;convert to ASCII
    ADDRESS-057
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-058
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_stop
    COMMENT-
    ADDRESS-059
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-05A
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s5
   OPERAND2-decimal2
    COMMENT-
    ADDRESS-05B
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s5
   OPERAND2-30
    COMMENT-;convert to ASCII
    ADDRESS-05C
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-05D
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s5
   OPERAND2-decimal1
    COMMENT-
    ADDRESS-05E
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s5
   OPERAND2-30
    COMMENT-;convert to ASCII
    ADDRESS-05F
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-060
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s5
   OPERAND2-decimal0
    COMMENT-
    ADDRESS-061
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s5
   OPERAND2-30
    COMMENT-;convert to ASCII
    ADDRESS-062
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-063
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_space
    COMMENT-;ensure next position is cleared
    ADDRESS-064
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-065
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-066
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-066
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-066
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Changing amplifier gain using press buttons
    ADDRESS-066
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-066
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-066
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Possible gain values are
    ADDRESS-066
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   Gain   Amplifier
    ADDRESS-066
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;            code
    ADDRESS-066
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;    -1        1
    ADDRESS-066
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;    -2        2
    ADDRESS-066
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;    -5        3
    ADDRESS-066
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   -10        4
    ADDRESS-066
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   -20        5
    ADDRESS-066
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   -50        6
    ADDRESS-066
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;  -100        7
    ADDRESS-066
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-066
      LABEL-gain_increase
INSTRUCTION-DISABLE
   OPERAND1-INTERRUPT
   OPERAND2-
    COMMENT-;stop normal operation
    ADDRESS-067
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s0
   OPERAND2-amp_A_gain
    COMMENT-;read current gain
    ADDRESS-068
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s0
   OPERAND2-01
    COMMENT-
    ADDRESS-069
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-08
    COMMENT-;test for too big
    ADDRESS-06A
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-new_gain_set
    COMMENT-
    ADDRESS-06B
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-07
    COMMENT-;maximum gain
    ADDRESS-06C
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-new_gain_set
   OPERAND2-
    COMMENT-
    ADDRESS-06D
      LABEL-gain_decrease
INSTRUCTION-DISABLE
   OPERAND1-INTERRUPT
   OPERAND2-
    COMMENT-;stop normal operation
    ADDRESS-06E
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s0
   OPERAND2-amp_A_gain
    COMMENT-;read current gain
    ADDRESS-06F
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s0
   OPERAND2-01
    COMMENT-
    ADDRESS-070
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-new_gain_set
    COMMENT-
    ADDRESS-071
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-01
    COMMENT-;minimum gain
    ADDRESS-072
      LABEL-new_gain_set
INSTRUCTION-STORE
   OPERAND1-s0
   OPERAND2-amp_A_gain
    COMMENT-;store new value
    ADDRESS-073
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s2
   OPERAND2-amp_B_gain
    COMMENT-;form the amplifier control byte
    ADDRESS-074
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s2
   OPERAND2-
    COMMENT-;B amplifier set by upper 4 bits
    ADDRESS-075
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s2
   OPERAND2-
    COMMENT-
    ADDRESS-076
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s2
   OPERAND2-
    COMMENT-
    ADDRESS-077
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s2
   OPERAND2-
    COMMENT-
    ADDRESS-078
      LABEL-
INSTRUCTION-OR
   OPERAND1-s2
   OPERAND2-s0
    COMMENT-;A amplifier set by lower
    ADDRESS-079
      LABEL-
INSTRUCTION-CALL
   OPERAND1-set_amp
   OPERAND2-
    COMMENT-;set SPI amplifier
    ADDRESS-07A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;display gain setting on LCD
    ADDRESS-07A
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-10
    COMMENT-;Line 1 position 0
    ADDRESS-07B
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_cursor
   OPERAND2-
    COMMENT-
    ADDRESS-07C
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_G
    COMMENT-
    ADDRESS-07D
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-07E
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_equals
    COMMENT-
    ADDRESS-07F
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-080
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_minus
    COMMENT-
    ADDRESS-081
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-082
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s0
   OPERAND2-amp_A_gain
    COMMENT-;read A gain setting
    ADDRESS-083
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-01
    COMMENT-;determine actual gain value
    ADDRESS-084
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-test_A2
    COMMENT-
    ADDRESS-085
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_1
    COMMENT-;gain is -1
    ADDRESS-086
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-087
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_space
    COMMENT-
    ADDRESS-088
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-089
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_space
    COMMENT-
    ADDRESS-08A
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-08B
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-wait_no_press
   OPERAND2-
    COMMENT-
    ADDRESS-08C
      LABEL-test_A2
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-02
    COMMENT-
    ADDRESS-08D
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-test_A3
    COMMENT-
    ADDRESS-08E
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_2
    COMMENT-;gain is -2
    ADDRESS-08F
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-090
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_space
    COMMENT-
    ADDRESS-091
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-092
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_space
    COMMENT-
    ADDRESS-093
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-094
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-wait_no_press
   OPERAND2-
    COMMENT-
    ADDRESS-095
      LABEL-test_A3
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-03
    COMMENT-
    ADDRESS-096
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-test_A4
    COMMENT-
    ADDRESS-097
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_5
    COMMENT-;gain is -5
    ADDRESS-098
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-099
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_space
    COMMENT-
    ADDRESS-09A
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-09B
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_space
    COMMENT-
    ADDRESS-09C
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-09D
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-wait_no_press
   OPERAND2-
    COMMENT-
    ADDRESS-09E
      LABEL-test_A4
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-04
    COMMENT-
    ADDRESS-09F
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-test_A5
    COMMENT-
    ADDRESS-0A0
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_1
    COMMENT-;gain is -10
    ADDRESS-0A1
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-0A2
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_0
    COMMENT-
    ADDRESS-0A3
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-0A4
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_space
    COMMENT-
    ADDRESS-0A5
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-0A6
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-wait_no_press
   OPERAND2-
    COMMENT-
    ADDRESS-0A7
      LABEL-test_A5
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-05
    COMMENT-
    ADDRESS-0A8
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-test_A6
    COMMENT-
    ADDRESS-0A9
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_2
    COMMENT-;gain is -20
    ADDRESS-0AA
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-0AB
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_0
    COMMENT-
    ADDRESS-0AC
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-0AD
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_space
    COMMENT-
    ADDRESS-0AE
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-0AF
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-wait_no_press
   OPERAND2-
    COMMENT-
    ADDRESS-0B0
      LABEL-test_A6
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-06
    COMMENT-
    ADDRESS-0B1
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-gain_A7
    COMMENT-
    ADDRESS-0B2
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_5
    COMMENT-;gain is -50
    ADDRESS-0B3
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-0B4
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_0
    COMMENT-
    ADDRESS-0B5
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-0B6
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_space
    COMMENT-
    ADDRESS-0B7
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-0B8
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-wait_no_press
   OPERAND2-
    COMMENT-
    ADDRESS-0B9
      LABEL-gain_A7
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_1
    COMMENT-;gain is -100
    ADDRESS-0BA
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-0BB
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_0
    COMMENT-
    ADDRESS-0BC
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-0BD
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_0
    COMMENT-
    ADDRESS-0BE
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-0BF
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;wait_no_press: CALL delay_20ms                     ;delay to help avoid switch bounce
    ADDRESS-0BF
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;INPUT s0, switch_port               ;check for release of press buttons
    ADDRESS-0BF
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;TEST s0, 05                         ;north and south buttons
    ADDRESS-0BF
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;JUMP NZ, wait_no_press
    ADDRESS-0BF
      LABEL-wait_no_press
INSTRUCTION-JUMP
   OPERAND1-warm_start
   OPERAND2-
    COMMENT-
    ADDRESS-0C0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0C0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-0C0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;16-bit by 16-bit Signed multiplier
    ADDRESS-0C0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-0C0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0C0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;16 bit signed multiplication using shift and add technique.
    ADDRESS-0C0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The full precision 32-bit product is returned.
    ADDRESS-0C0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0C0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The key to signed multiplication is to think of all bits of the second operand
    ADDRESS-0C0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;[s1,s0] as being positive except for the most significant bit. This means that
    ADDRESS-0C0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;the first operand is added to the result in all cases when there is a '1' in the
    ADDRESS-0C0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;second operand except for the MSB case when the first operand is subtracted if there
    ADDRESS-0C0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;is a '1'.
    ADDRESS-0C0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0C0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;[s7,s6,s5,s4]=[s3,s2]x[s1,s0]
    ADDRESS-0C0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0C0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,sA
    ADDRESS-0C0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0C0
      LABEL-mult_16x16s
INSTRUCTION-LOAD
   OPERAND1-s7
   OPERAND2-00
    COMMENT-;clear accumulator
    ADDRESS-0C1
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s6
   OPERAND2-00
    COMMENT-
    ADDRESS-0C2
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-00
    COMMENT-;Set bit 14 to act as a bit shift counter
    ADDRESS-0C3
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s4
   OPERAND2-00
    COMMENT-
    ADDRESS-0C4
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s8
   OPERAND2-00
    COMMENT-;sign extend [s3,s2] to form [s9,s8,s3,s2]
    ADDRESS-0C5
      LABEL-
INSTRUCTION-TEST
   OPERAND1-s3
   OPERAND2-80
    COMMENT-;test sign of first operand
    ADDRESS-0C6
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-m16s_pos
    COMMENT-
    ADDRESS-0C7
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s8
   OPERAND2-FF
    COMMENT-
    ADDRESS-0C8
      LABEL-m16s_pos
INSTRUCTION-LOAD
   OPERAND1-s9
   OPERAND2-s8
    COMMENT-;[s9,s8,s3,s2]=0000xxxx or FFFFxxxx as required
    ADDRESS-0C9
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sA
   OPERAND2-0F
    COMMENT-;15 positive shift and add operations to perform
    ADDRESS-0CA
      LABEL-m16s_loop
INSTRUCTION-SR0
   OPERAND1-s1
   OPERAND2-
    COMMENT-;shift right operand [s1,s0]
    ADDRESS-0CB
      LABEL-
INSTRUCTION-SRA
   OPERAND1-s0
   OPERAND2-
    COMMENT-
    ADDRESS-0CC
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NC
   OPERAND2-m16s_noadd
    COMMENT-;test for a '1'
    ADDRESS-0CD
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s4
   OPERAND2-s2
    COMMENT-;32-bit addition [s7,s6,s5,s4]=[s7,s6,s5,s4]+[s9,s8,s3,s2]
    ADDRESS-0CE
      LABEL-
INSTRUCTION-ADDCY
   OPERAND1-s5
   OPERAND2-s3
    COMMENT-
    ADDRESS-0CF
      LABEL-
INSTRUCTION-ADDCY
   OPERAND1-s6
   OPERAND2-s8
    COMMENT-
    ADDRESS-0D0
      LABEL-
INSTRUCTION-ADDCY
   OPERAND1-s7
   OPERAND2-s9
    COMMENT-
    ADDRESS-0D1
      LABEL-m16s_noadd
INSTRUCTION-SL0
   OPERAND1-s2
   OPERAND2-
    COMMENT-;multiply first operand by 2
    ADDRESS-0D2
      LABEL-
INSTRUCTION-SLA
   OPERAND1-s3
   OPERAND2-
    COMMENT-
    ADDRESS-0D3
      LABEL-
INSTRUCTION-SLA
   OPERAND1-s8
   OPERAND2-
    COMMENT-
    ADDRESS-0D4
      LABEL-
INSTRUCTION-SLA
   OPERAND1-s9
   OPERAND2-
    COMMENT-
    ADDRESS-0D5
      LABEL-
INSTRUCTION-SUB
   OPERAND1-sA
   OPERAND2-01
    COMMENT-
    ADDRESS-0D6
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-m16s_loop
    COMMENT-;move to next unsigned bit
    ADDRESS-0D7
      LABEL-
INSTRUCTION-TEST
   OPERAND1-s0
   OPERAND2-01
    COMMENT-;test sign bit of operand [s1,s0]
    ADDRESS-0D8
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NC
   OPERAND2-m16s_nosub
    COMMENT-
    ADDRESS-0D9
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s4
   OPERAND2-s2
    COMMENT-;32-bit subtraction [s7,s6,s5,s4]=[s7,s6,s5,s4]-[s9,s8,s3,s2]
    ADDRESS-0DA
      LABEL-
INSTRUCTION-SUBCY
   OPERAND1-s5
   OPERAND2-s3
    COMMENT-
    ADDRESS-0DB
      LABEL-
INSTRUCTION-SUBCY
   OPERAND1-s6
   OPERAND2-s8
    COMMENT-
    ADDRESS-0DC
      LABEL-
INSTRUCTION-SUBCY
   OPERAND1-s7
   OPERAND2-s9
    COMMENT-
    ADDRESS-0DD
      LABEL-m16s_nosub
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-0DE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0DE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0DE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0DE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-0DE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;16-bit positive integer to 5 digit decimal conversion
    ADDRESS-0DE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-0DE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0DE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Convert the 16 bit value in register set [s7,s6]
    ADDRESS-0DE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;into the BCD decimal equivalent located in the scratch pad memory
    ADDRESS-0DE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;locations 'decimal0' to 'decimal4' which must be in ascending locations.
    ADDRESS-0DE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0DE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Register set [s9,s8,s7,s6] are preserved.
    ADDRESS-0DE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0DE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0DE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Each digit is formed in turn starting with the least significant.
    ADDRESS-0DE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0DE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0,s1,s2,s3,s4,s5,s6,s7,s8
    ADDRESS-0DE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0DE
      LABEL-integer16_to_BCD
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-05
    COMMENT-;5 digits to be formed from value up to 65535
    ADDRESS-0DF
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s8
   OPERAND2-decimal0
    COMMENT-;pointer for LS-Digit
    ADDRESS-0E0
      LABEL-int_to_BCD_loop
INSTRUCTION-CALL
   OPERAND1-divide_16bit_by_10
   OPERAND2-
    COMMENT-;[s7,s6]=[s7,s6]/10  with remainder in s4
    ADDRESS-0E1
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s4
   OPERAND2-(s8)
    COMMENT-;remainder becomes digit value
    ADDRESS-0E2
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s8
   OPERAND2-01
    COMMENT-;move to next most significant digit
    ADDRESS-0E3
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s0
   OPERAND2-01
    COMMENT-;one less digit to compute
    ADDRESS-0E4
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-int_to_BCD_loop
    COMMENT-
    ADDRESS-0E5
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-0E6
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0E6
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Divide 16-bit binary integer by 10
    ADDRESS-0E6
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0E6
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The value to be divided is held in register set [s7,s6]
    ADDRESS-0E6
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;and this is where the result is returned to.
    ADDRESS-0E6
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0E6
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;At then end of the integer division the remainder in the range 0 to 9
    ADDRESS-0E6
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;will be in register s4.
    ADDRESS-0E6
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0E6
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s1,s2,s3,s4,s5,s6,s7
    ADDRESS-0E6
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Other registers are used but are preserved
    ADDRESS-0E6
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0E6
      LABEL-divide_16bit_by_10
INSTRUCTION-LOAD
   OPERAND1-s4
   OPERAND2-s6
    COMMENT-;copy input value to [s5,s4]
    ADDRESS-0E7
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-s7
    COMMENT-
    ADDRESS-0E8
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s6
   OPERAND2-00
    COMMENT-;clear result
    ADDRESS-0E9
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s7
   OPERAND2-00
    COMMENT-
    ADDRESS-0EA
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-00
    COMMENT-;initialise '10' value into msb's of set [s3,s2]
    ADDRESS-0EB
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s3
   OPERAND2-A0
    COMMENT-
    ADDRESS-0EC
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-0D
    COMMENT-;13 subtract and shift iterations to be performed
    ADDRESS-0ED
      LABEL-div10_loop
INSTRUCTION-SUB
   OPERAND1-s4
   OPERAND2-s2
    COMMENT-;perform 16-bit subtract [s5,s4]-[s3,s2]
    ADDRESS-0EE
      LABEL-
INSTRUCTION-SUBCY
   OPERAND1-s5
   OPERAND2-s3
    COMMENT-
    ADDRESS-0EF
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-div10_restore
    COMMENT-
    ADDRESS-0F0
      LABEL-
INSTRUCTION-SL1
   OPERAND1-s6
   OPERAND2-
    COMMENT-;shift '1' into result because subtract was possible
    ADDRESS-0F1
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-div10_shifts
   OPERAND2-
    COMMENT-
    ADDRESS-0F2
      LABEL-div10_restore
INSTRUCTION-ADD
   OPERAND1-s4
   OPERAND2-s2
    COMMENT-;perform 32-bit addition [s5,s4]+[s3,s2]
    ADDRESS-0F3
      LABEL-
INSTRUCTION-ADDCY
   OPERAND1-s5
   OPERAND2-s3
    COMMENT-;to restore value
    ADDRESS-0F4
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s6
   OPERAND2-
    COMMENT-;shift '0' into result because subtract was not possible
    ADDRESS-0F5
      LABEL-div10_shifts
INSTRUCTION-SLA
   OPERAND1-s7
   OPERAND2-
    COMMENT-;complete 16-bit shift left
    ADDRESS-0F6
      LABEL-
INSTRUCTION-SR0
   OPERAND1-s3
   OPERAND2-
    COMMENT-;divide '10' value by 2 (shift right 1 place)
    ADDRESS-0F7
      LABEL-
INSTRUCTION-SRA
   OPERAND1-s2
   OPERAND2-
    COMMENT-
    ADDRESS-0F8
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s1
   OPERAND2-01
    COMMENT-;count iterations
    ADDRESS-0F9
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-div10_loop
    COMMENT-
    ADDRESS-0FA
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;SPI communication routines for Spartan-3E Starter Kit
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;These routines will work with two output ports and one input port which should be
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;defined as follows using CONSTANT directives.
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   (replace 'pp' with appropriate port address in each case)
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;In the list of CONSTANT directives, there are ports associated with all the SPI devices
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;provided on the board. Even if some devices are not used, it is vital that the remaining
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;devices are disabled. Leaving all signals connected and use of these routines will ensure
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;that all other devices are disabled when communicating with a particular device.
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;CONSTANT SPI_control_port, pp       ;SPI clock and chip selects
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;CONSTANT SPI_sck, 01                ;                  SCK - bit0
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;CONSTANT SPI_rom_cs, 02             ;    serial rom select - bit1
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;CONSTANT SPI_spare_control, 04      ;                spare - bit2
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;CONSTANT SPI_amp_cs, 08             ;     amplifier select - bit3
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;CONSTANT SPI_adc_conv, 10           ;          A/D convert - bit4
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;CONSTANT SPI_dac_cs, 20             ;           D/A select - bit5
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;CONSTANT SPI_amp_shdn, 40           ;       amplifier SHDN - bit6
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;CONSTANT SPI_dac_clr, 80            ;            D/A clear - bit7
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;CONSTANT SPI_output_port, pp        ;SPI data output
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;CONSTANT SPI_sdo, 80                ;   SDO - bit7
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;CONSTANT SPI_input_port, pp         ;SPI data input
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;CONSTANT SPI_sdi, 80                ;             SDI - bit7
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;CONSTANT SPI_amp_sdi, 40            ;   amplifier SDI - bit6
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Initialise SPI bus
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;This routine should be used to initialise the SPI bus.
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The SCK clock is made low.
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Device selections are made inactive as follows
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   SPI_sck      = 0      Clock is Low (required)
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   SPI_rom_cs   = 1      Deselect ROM
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   spare        = 1      spare control bit
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   SPI_amp_cs   = 1      Deselect amplifier
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   SPI_adc_conv = 0      A/D convert ready to apply positive pulse
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   SPI_dac_cs   = 1      Deselect D/A
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   SPI_amp_shdn = 0      Amplifier active and available
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   SPI_dac_clr  = 1      D/A clear off
    ADDRESS-0FB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0FB
      LABEL-SPI_init
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-AE
    COMMENT-;normally AE
    ADDRESS-0FC
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s0
   OPERAND2-SPI_control_port
    COMMENT-
    ADDRESS-0FD
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-0FE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0FE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0FE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0FE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0FE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-0FE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;SPI communication routines for Programmable Amplifier
    ADDRESS-0FE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-0FE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0FE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0FE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Set the A and B channel gain of the Dual Amplifier (LTC6912-1).
    ADDRESS-0FE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0FE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The gain value should be provided in the s2 register with the upper nibble
    ADDRESS-0FE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;defining the gain for the B channel and lower nibble the gain for the A channel.
    ADDRESS-0FE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 0000 = 0 hex = Gain  0 with input hi-Z and output driving
    ADDRESS-0FE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 0001 = 1 hex = Gain -1
    ADDRESS-0FE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 0010 = 2 hex = Gain -2
    ADDRESS-0FE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 0011 = 3 hex = Gain -5
    ADDRESS-0FE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 0100 = 4 hex = Gain -10
    ADDRESS-0FE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 0101 = 5 hex = Gain -20
    ADDRESS-0FE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 0110 = 6 hex = Gain -50
    ADDRESS-0FE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 0111 = 7 hex = Gain -100
    ADDRESS-0FE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 1000 = 8 hex = software shutdown (power on default). Hi-Z output.
    ADDRESS-0FE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0FE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;On return, the s2, register will contain the response from the LTC6912-1 amplifier.
    ADDRESS-0FE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;This will be the same format and indicate the previous setting of the amplifier.
    ADDRESS-0FE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The response is obtained from the dedicated AMP_SDI signal since the LTC6912 output
    ADDRESS-0FE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;is always active and can not be on a shared SPI bus.
    ADDRESS-0FE
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-0FE
      LABEL-set_amp
INSTRUCTION-CALL
   OPERAND1-SPI_init
   OPERAND2-
    COMMENT-;ensure known state of bus and s0 register
    ADDRESS-0FF
      LABEL-
INSTRUCTION-XOR
   OPERAND1-s0
   OPERAND2-SPI_amp_cs
    COMMENT-;select low on Amplifier chip select
    ADDRESS-100
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s0
   OPERAND2-SPI_control_port
    COMMENT-
    ADDRESS-101
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-08
    COMMENT-;8-bits to transmit and receive
    ADDRESS-102
      LABEL-next_amp_SPI_bit
INSTRUCTION-OUTPUT
   OPERAND1-s2
   OPERAND2-SPI_output_port
    COMMENT-;output data bit
    ADDRESS-103
      LABEL-
INSTRUCTION-XOR
   OPERAND1-s0
   OPERAND2-SPI_sck
    COMMENT-;clock High (bit0)
    ADDRESS-104
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s0
   OPERAND2-SPI_control_port
    COMMENT-;drive clock High
    ADDRESS-105
      LABEL-
INSTRUCTION-INPUT
   OPERAND1-s3
   OPERAND2-SPI_input_port
    COMMENT-;read input bit
    ADDRESS-106
      LABEL-
INSTRUCTION-TEST
   OPERAND1-s3
   OPERAND2-SPI_amp_sdi
    COMMENT-;detect state of received bit
    ADDRESS-107
      LABEL-
INSTRUCTION-SLA
   OPERAND1-s2
   OPERAND2-
    COMMENT-;shift new data into result and move to next transmit bit
    ADDRESS-108
      LABEL-
INSTRUCTION-XOR
   OPERAND1-s0
   OPERAND2-SPI_sck
    COMMENT-;clock Low (bit0)
    ADDRESS-109
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s0
   OPERAND2-SPI_control_port
    COMMENT-;drive clock Low
    ADDRESS-10A
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s1
   OPERAND2-01
    COMMENT-;count bits
    ADDRESS-10B
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-next_amp_SPI_bit
    COMMENT-;repeat until finished
    ADDRESS-10C
      LABEL-
INSTRUCTION-XOR
   OPERAND1-s0
   OPERAND2-SPI_amp_cs
    COMMENT-;deselect the amplifier
    ADDRESS-10D
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s0
   OPERAND2-SPI_control_port
    COMMENT-
    ADDRESS-10E
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;SPI communication routines for A/D Converter
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Sample A/D converter (LTC1407A-1) and return results.
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Note there is a latency of one read to obtain the value. Each read results in the
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;the analogue inputs being sampled and converted but this value will only be transmitted
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;during the next read and conversion cycle.
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The results are returned as follows.
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   Channel 0 in registers [s9,s8]
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   Channel 1 in registers [s7,s6]
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Where each is a 14-bit twos complement value sign extended to 16-bits.
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Each 14-bit value represents the analogue voltage in the range -1.25v to +1.25v
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;relative to the reference voltage of 1.65v (3.3v/2). Hence the actual input voltage
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;range is 0.4v to 2.9v. Since the input to the A/D is supplied via the programmable
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;amplifier, the VINA and VINB inputs are inverted and may cover a smaller range if                       ;
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;desired.
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Examples
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   VINA = 0.65v with gain=-1 means input to A/D = 2.65v
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      This is equivalent to +1.00v which is value (8192/1.25)*1 = 6553 (1999 hex)
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   VINA = 2.65v with gain=-1 means input to A/D = 0.65v
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      This is equivalent to -1.00v which is value (2048/1.25)*-1 = -6553 (E667 hex)
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Although the A/D converter claims to be an SPI device, it really
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;does not conform to the normal specification of the 4-wire interface.
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Firstly the CONV signal is only pulsed High and does not behave like
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;a normal active low select signal. Secondly, the communication is
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;34 bits which does not fit a byte boundary, and thirdly, the data output
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;to its SDO pin changes as a result of rising edges of SCK clock which
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;is not the same as the falling edge used by other devices.
    ADDRESS-10F
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-10F
      LABEL-adc_read
INSTRUCTION-CALL
   OPERAND1-SPI_init
   OPERAND2-
    COMMENT-;ensure known state of bus and s0 register
    ADDRESS-110
      LABEL-
INSTRUCTION-XOR
   OPERAND1-s0
   OPERAND2-SPI_adc_conv
    COMMENT-;Pulse AD-CONV High to take sample and start
    ADDRESS-111
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s0
   OPERAND2-SPI_control_port
    COMMENT-;  conversion and transmission of data.
    ADDRESS-112
      LABEL-
INSTRUCTION-XOR
   OPERAND1-s0
   OPERAND2-SPI_adc_conv
    COMMENT-;AD-CONV Low
    ADDRESS-113
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s0
   OPERAND2-SPI_control_port
    COMMENT-
    ADDRESS-114
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-22
    COMMENT-;34 clocks to read all data
    ADDRESS-115
      LABEL-next_adc_bit
INSTRUCTION-XOR
   OPERAND1-s0
   OPERAND2-SPI_sck
    COMMENT-;clock High (bit0)
    ADDRESS-116
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s0
   OPERAND2-SPI_control_port
    COMMENT-;drive clock High
    ADDRESS-117
      LABEL-
INSTRUCTION-XOR
   OPERAND1-s0
   OPERAND2-SPI_sck
    COMMENT-;clock Low (bit0)
    ADDRESS-118
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s0
   OPERAND2-SPI_control_port
    COMMENT-;drive clock Low
    ADDRESS-119
      LABEL-
INSTRUCTION-INPUT
   OPERAND1-s3
   OPERAND2-SPI_input_port
    COMMENT-;read input bit
    ADDRESS-11A
      LABEL-
INSTRUCTION-TEST
   OPERAND1-s3
   OPERAND2-SPI_sdi
    COMMENT-;detect state of received bit
    ADDRESS-11B
      LABEL-
INSTRUCTION-SLA
   OPERAND1-s6
   OPERAND2-
    COMMENT-;shift new data into result registers
    ADDRESS-11C
      LABEL-
INSTRUCTION-SLA
   OPERAND1-s7
   OPERAND2-
    COMMENT-
    ADDRESS-11D
      LABEL-
INSTRUCTION-SLA
   OPERAND1-s8
   OPERAND2-
    COMMENT-
    ADDRESS-11E
      LABEL-
INSTRUCTION-SLA
   OPERAND1-s9
   OPERAND2-
    COMMENT-
    ADDRESS-11F
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s1
   OPERAND2-01
    COMMENT-;count bits
    ADDRESS-120
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-next_adc_bit
    COMMENT-;repeat until finished
    ADDRESS-121
      LABEL-
INSTRUCTION-SRX
   OPERAND1-s9
   OPERAND2-
    COMMENT-;sign extend 14-bit result in [s9,s8]
    ADDRESS-122
      LABEL-
INSTRUCTION-SRA
   OPERAND1-s8
   OPERAND2-
    COMMENT-
    ADDRESS-123
      LABEL-
INSTRUCTION-SRX
   OPERAND1-s9
   OPERAND2-
    COMMENT-
    ADDRESS-124
      LABEL-
INSTRUCTION-SRA
   OPERAND1-s8
   OPERAND2-
    COMMENT-
    ADDRESS-125
      LABEL-
INSTRUCTION-SRX
   OPERAND1-s7
   OPERAND2-
    COMMENT-;sign extend 14-bit result in [s7,s6]
    ADDRESS-126
      LABEL-
INSTRUCTION-SRA
   OPERAND1-s6
   OPERAND2-
    COMMENT-
    ADDRESS-127
      LABEL-
INSTRUCTION-SRX
   OPERAND1-s7
   OPERAND2-
    COMMENT-
    ADDRESS-128
      LABEL-
INSTRUCTION-SRA
   OPERAND1-s6
   OPERAND2-
    COMMENT-
    ADDRESS-129
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;thejas;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;thejas;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;thejas;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;D/A related: Send and receive one byte to and from the SPI D/A converter.
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The data supplied in register 's2' is transmitted to the SPI bus and
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;at the same time the received byte is used to replace the value in 's2'.
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The SCK clock is generated by software and results in a communication rate of
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;2.5Mbit/s with a 50MHz clock.
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Note that you must have previously selected the required device on the bus
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;before attempting communication and you must subsequently deselect the device
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;when appropriate.
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Entry to this routine assumes that register s0 defines the state of the SPI
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;control signals including SCK which should be Low. The easiest way to achieve this is
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;to use the SPI_init routine before calling this one for the first time.
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;As a 'master' the signal sequence is as follows..
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   Transmit data bit on SDO line
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   Drive SCK transition from low to high
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   Receive data bit from SDI line (D/A transmits on previous falling edge)
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   Drive SCK transition from high to low.
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Important note
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   The received data bit must be captured some time before SCK goes low.
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   However the combination of relatively slow clock to output time of the
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   LTC2624 combined with the low drive strength of its SDO output means that
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   the received bit needs maximum time to settle. Therefore this routine
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   schedules the read as late as it can.
    ADDRESS-12A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-12A
      LABEL-SPI_dac_tx_rx
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-08
    COMMENT-;8-bits to transmit and receive
    ADDRESS-12B
      LABEL-next_SPI_dac_bit
INSTRUCTION-OUTPUT
   OPERAND1-s2
   OPERAND2-SPI_output_port
    COMMENT-;output data bit ready to be used on rising edge
    ADDRESS-12C
      LABEL-
INSTRUCTION-XOR
   OPERAND1-s0
   OPERAND2-SPI_sck
    COMMENT-;clock High (bit0)
    ADDRESS-12D
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s0
   OPERAND2-SPI_control_port
    COMMENT-;drive clock High
    ADDRESS-12E
      LABEL-
INSTRUCTION-XOR
   OPERAND1-s0
   OPERAND2-SPI_sck
    COMMENT-;prepare clock Low (bit0)
    ADDRESS-12F
      LABEL-
INSTRUCTION-INPUT
   OPERAND1-s3
   OPERAND2-SPI_input_port
    COMMENT-;read input bit
    ADDRESS-130
      LABEL-
INSTRUCTION-TEST
   OPERAND1-s3
   OPERAND2-SPI_sdi
    COMMENT-;detect state of received bit
    ADDRESS-131
      LABEL-
INSTRUCTION-SLA
   OPERAND1-s2
   OPERAND2-
    COMMENT-;shift new data into result and move to next transmit bit
    ADDRESS-132
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s0
   OPERAND2-SPI_control_port
    COMMENT-;drive clock Low
    ADDRESS-133
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s1
   OPERAND2-01
    COMMENT-;count bits
    ADDRESS-134
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-next_SPI_dac_bit
    COMMENT-;repeat until finished
    ADDRESS-135
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Set a voltage on one of the LTC2624 D/A converter outputs
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The D/A converter has 4 channels. Specify which channel is to be set using
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;register sC as follows....
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   sC     Channel                 Nominal Voltage Range
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   00        A                       0 to 3.30v (or VREFAB)
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   01        B                       0 to 3.30v (or VREFAB)
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   02        C                       0 to 2.50v (or VREFCD)
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   03        D                       0 to 2.50v (or VREFCD)
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;   0F        All channels            various as above.
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The analogue level is a 12-bit value to be supplied in lower 12-bits of register
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;pair [sB,sA]. If this value is called 'k' and is in the range 0 to 4095 (000 to FFF)
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;then
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      Vout = (k/4096) * VREFx
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Hence it is not possible to reach the absolute level of the reference.
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Here are some useful values..
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;    Voltage    A or B    C or D
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      0.0       000       000
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      0.5       26D       333
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      0.65      327               A/D reference -1.00v
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      1.0       4D9       666
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      1.5       746       99A
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      1.65      800       A8F     converter reference = 3.3/2 = 1.65v
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      2.0       9B2       CCD
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      2.5       C1F       FFF
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      2.65      CD9               A/D reference +1.00v
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      3.0       E8C       n/a
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;      3.3       FFF       n/a
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Note that the full scale deflection of FFF will result in different output
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;voltages due to different reference voltages for each pair of channels.
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;SPI communication with the DAC only requires a 24-bit word to be transmitted.
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;However, the device internally contains a 32-bit shift register. When writing
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;a command word, the previous contents are shifted out and can be observed by
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;the master (Spartan-3E in this case). If you do not use a 32-bit format, then
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;the read back is confusing. Hence this routine uses a 32-bit format by transmitting
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;a dummy byte first.
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;  Byte 1 = 00   8 dummy bits
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;  Byte 2 = 3c   Command nibble (3=write and update) and channel selection
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;  Byte 3 = dd   Upper 8-bits of the 12-bit voltage value
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;  Byte 4 = d0   lower 4-bits of the 12-bit voltage value and 4 dummy bits.
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;At the end of this communication, the register set [s9,s8,s7,s6] will contain the
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;data received back from the D/A converter which should be the previous command.
    ADDRESS-136
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-136
      LABEL-set_dac
INSTRUCTION-CALL
   OPERAND1-SPI_init
   OPERAND2-
    COMMENT-;ensure known state of bus and s0 register
    ADDRESS-137
      LABEL-
INSTRUCTION-XOR
   OPERAND1-s0
   OPERAND2-SPI_dac_cs
    COMMENT-;select low on D/A converter
    ADDRESS-138
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s0
   OPERAND2-SPI_control_port
    COMMENT-
    ADDRESS-139
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-00
    COMMENT-;Write dummy byte to DAC
    ADDRESS-13A
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SPI_dac_tx_rx
   OPERAND2-
    COMMENT-
    ADDRESS-13B
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s9
   OPERAND2-s2
    COMMENT-;capture response
    ADDRESS-13C
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-sC
    COMMENT-;Select channel for update
    ADDRESS-13D
      LABEL-
INSTRUCTION-AND
   OPERAND1-s2
   OPERAND2-0F
    COMMENT-;isolate channel bits to be certain of correct command
    ADDRESS-13E
      LABEL-
INSTRUCTION-OR
   OPERAND1-s2
   OPERAND2-30
    COMMENT-;Use immediate Write and Update command is "0011"
    ADDRESS-13F
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SPI_dac_tx_rx
   OPERAND2-
    COMMENT-
    ADDRESS-140
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s8
   OPERAND2-s2
    COMMENT-;capture response
    ADDRESS-141
      LABEL-
INSTRUCTION-SL0
   OPERAND1-sA
   OPERAND2-
    COMMENT-;data shift bits into correct position
    ADDRESS-142
      LABEL-
INSTRUCTION-SLA
   OPERAND1-sB
   OPERAND2-
    COMMENT-;with 4 dummy bits ('0') in the least significant bits.
    ADDRESS-143
      LABEL-
INSTRUCTION-SL0
   OPERAND1-sA
   OPERAND2-
    COMMENT-
    ADDRESS-144
      LABEL-
INSTRUCTION-SLA
   OPERAND1-sB
   OPERAND2-
    COMMENT-
    ADDRESS-145
      LABEL-
INSTRUCTION-SL0
   OPERAND1-sA
   OPERAND2-
    COMMENT-
    ADDRESS-146
      LABEL-
INSTRUCTION-SLA
   OPERAND1-sB
   OPERAND2-
    COMMENT-
    ADDRESS-147
      LABEL-
INSTRUCTION-SL0
   OPERAND1-sA
   OPERAND2-
    COMMENT-
    ADDRESS-148
      LABEL-
INSTRUCTION-SLA
   OPERAND1-sB
   OPERAND2-
    COMMENT-
    ADDRESS-149
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-sB
    COMMENT-;Write 12 bit value followed by 4 dummy bits
    ADDRESS-14A
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SPI_dac_tx_rx
   OPERAND2-
    COMMENT-
    ADDRESS-14B
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s7
   OPERAND2-s2
    COMMENT-;capture response
    ADDRESS-14C
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-sA
    COMMENT-
    ADDRESS-14D
      LABEL-
INSTRUCTION-CALL
   OPERAND1-SPI_dac_tx_rx
   OPERAND2-
    COMMENT-
    ADDRESS-14E
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s6
   OPERAND2-s2
    COMMENT-;capture response
    ADDRESS-14F
      LABEL-
INSTRUCTION-XOR
   OPERAND1-s0
   OPERAND2-SPI_dac_cs
    COMMENT-;deselect the D/A converter to execute
    ADDRESS-150
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s0
   OPERAND2-SPI_control_port
    COMMENT-
    ADDRESS-151
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-152
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-152
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Perform a hard reset of the D/A converter
    ADDRESS-152
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-152
      LABEL-dac_reset
INSTRUCTION-CALL
   OPERAND1-SPI_init
   OPERAND2-
    COMMENT-;ensure known state of bus and s0 register
    ADDRESS-153
      LABEL-
INSTRUCTION-XOR
   OPERAND1-s0
   OPERAND2-SPI_dac_clr
    COMMENT-;pulse the clear signal.
    ADDRESS-154
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s0
   OPERAND2-SPI_control_port
    COMMENT-
    ADDRESS-155
      LABEL-
INSTRUCTION-XOR
   OPERAND1-s0
   OPERAND2-SPI_dac_clr
    COMMENT-
    ADDRESS-156
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s0
   OPERAND2-SPI_control_port
    COMMENT-
    ADDRESS-157
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-158
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-158
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-158
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-158
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;LCD text messages
    ADDRESS-158
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-158
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-158
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-158
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Display 'PicoBlaze' on LCD at current cursor position
    ADDRESS-158
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-158
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-158
      LABEL-disp_PicoBlaze
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_P
    COMMENT-
    ADDRESS-159
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-15A
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_i
    COMMENT-
    ADDRESS-15B
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-15C
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_c
    COMMENT-
    ADDRESS-15D
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-15E
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_o
    COMMENT-
    ADDRESS-15F
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-160
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_B
    COMMENT-
    ADDRESS-161
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-162
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_l
    COMMENT-
    ADDRESS-163
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-164
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_a
    COMMENT-
    ADDRESS-165
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-166
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_z
    COMMENT-
    ADDRESS-167
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-168
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_e
    COMMENT-
    ADDRESS-169
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-16A
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-16B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-16B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-16B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Display 'ADC Control' on LCD at current cursor position
    ADDRESS-16B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-16B
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-16B
      LABEL-disp_Filter
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_F
    COMMENT-
    ADDRESS-16C
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-16D
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_i
    COMMENT-
    ADDRESS-16E
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-16F
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_l
    COMMENT-
    ADDRESS-170
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-171
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_t
    COMMENT-
    ADDRESS-172
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-173
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_e
    COMMENT-
    ADDRESS-174
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-175
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_r
    COMMENT-
    ADDRESS-176
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-177
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-178
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-178
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-178
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Display 'A/D' on LCD at current cursor position
    ADDRESS-178
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-178
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-178
      LABEL-disp_AD
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_A
    COMMENT-
    ADDRESS-179
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-17A
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_divide
    COMMENT-
    ADDRESS-17B
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-17C
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_D
    COMMENT-
    ADDRESS-17D
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-17E
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-character_equals
    COMMENT-
    ADDRESS-17F
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-180
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-181
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-181
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-181
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-181
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-181
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Value to ASCII Conversions and LCD display
    ADDRESS-181
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-181
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-181
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Convert hexadecimal value provided in register s0 into ASCII characters
    ADDRESS-181
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-181
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The value provided must can be any value in the range 00 to FF and will be converted into
    ADDRESS-181
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;two ASCII characters.
    ADDRESS-181
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;     The upper nibble will be represented by an ASCII character returned in register s2.
    ADDRESS-181
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;     The lower nibble will be represented by an ASCII character returned in register s1.
    ADDRESS-181
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-181
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The ASCII representations of '0' to '9' are 30 to 39 hexadecimal which is simply 30 hex
    ADDRESS-181
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;added to the actual decimal value. The ASCII representations of 'A' to 'F' are 41 to 46
    ADDRESS-181
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;hexadecimal requiring a further addition of 07 to the 30 already added.
    ADDRESS-181
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-181
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s1 and s2.
    ADDRESS-181
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-181
      LABEL-hex_byte_to_ASCII
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-s0
    COMMENT-;remember value supplied
    ADDRESS-182
      LABEL-
INSTRUCTION-SR0
   OPERAND1-s0
   OPERAND2-
    COMMENT-;isolate upper nibble
    ADDRESS-183
      LABEL-
INSTRUCTION-SR0
   OPERAND1-s0
   OPERAND2-
    COMMENT-
    ADDRESS-184
      LABEL-
INSTRUCTION-SR0
   OPERAND1-s0
   OPERAND2-
    COMMENT-
    ADDRESS-185
      LABEL-
INSTRUCTION-SR0
   OPERAND1-s0
   OPERAND2-
    COMMENT-
    ADDRESS-186
      LABEL-
INSTRUCTION-CALL
   OPERAND1-hex_to_ASCII
   OPERAND2-
    COMMENT-;convert
    ADDRESS-187
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-s0
    COMMENT-;upper nibble value in s2
    ADDRESS-188
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-s1
    COMMENT-;restore complete value
    ADDRESS-189
      LABEL-
INSTRUCTION-AND
   OPERAND1-s0
   OPERAND2-0F
    COMMENT-;isolate lower nibble
    ADDRESS-18A
      LABEL-
INSTRUCTION-CALL
   OPERAND1-hex_to_ASCII
   OPERAND2-
    COMMENT-;convert
    ADDRESS-18B
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-s0
    COMMENT-;lower nibble value in s1
    ADDRESS-18C
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-18D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-18D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Convert hexadecimal value provided in register s0 into ASCII character
    ADDRESS-18D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-18D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Register used s0
    ADDRESS-18D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-18D
      LABEL-hex_to_ASCII
INSTRUCTION-SUB
   OPERAND1-s0
   OPERAND2-0A
    COMMENT-;test if value is in range 0 to 9
    ADDRESS-18E
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-number_char
    COMMENT-
    ADDRESS-18F
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s0
   OPERAND2-07
    COMMENT-;ASCII char A to F in range 41 to 46
    ADDRESS-190
      LABEL-number_char
INSTRUCTION-ADD
   OPERAND1-s0
   OPERAND2-3A
    COMMENT-;ASCII char 0 to 9 in range 30 to 40
    ADDRESS-191
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-192
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-192
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-192
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Display the two character HEX value of the register contents 's0' on
    ADDRESS-192
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;the LCD display at the current cursor position.
    ADDRESS-192
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-192
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s1, s2, s4, s5, s6
    ADDRESS-192
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-192
      LABEL-disp_hex_byte
INSTRUCTION-CALL
   OPERAND1-hex_byte_to_ASCII
   OPERAND2-
    COMMENT-
    ADDRESS-193
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s6
   OPERAND2-s1
    COMMENT-;remember lower hex character
    ADDRESS-194
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-s2
    COMMENT-;display upper hex character
    ADDRESS-195
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-196
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-s6
    COMMENT-;display lower hex character
    ADDRESS-197
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_data
   OPERAND2-
    COMMENT-
    ADDRESS-198
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-199
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-199
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-199
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-199
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Software delay routines
    ADDRESS-199
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-199
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-199
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-199
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-199
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Delay of 1us.
    ADDRESS-199
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-199
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Constant value defines reflects the clock applied to KCPSM3. Every instruction
    ADDRESS-199
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;executes in 2 clock cycles making the calculation highly predictable. The '6' in
    ADDRESS-199
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;the following equation even allows for 'CALL delay_1us' instruction in the initiating code.
    ADDRESS-199
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-199
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
    ADDRESS-199
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-199
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0
    ADDRESS-199
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-199
      LABEL-delay_1us
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-delay_1us_constant
    COMMENT-
    ADDRESS-19A
      LABEL-wait_1us
INSTRUCTION-SUB
   OPERAND1-s0
   OPERAND2-01
    COMMENT-
    ADDRESS-19B
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-wait_1us
    COMMENT-
    ADDRESS-19C
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-19D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-19D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Delay of 40us.
    ADDRESS-19D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-19D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s1
    ADDRESS-19D
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-19D
      LABEL-delay_40us
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-28
    COMMENT-;40 x 1us = 40us
    ADDRESS-19E
      LABEL-wait_40us
INSTRUCTION-CALL
   OPERAND1-delay_1us
   OPERAND2-
    COMMENT-
    ADDRESS-19F
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s1
   OPERAND2-01
    COMMENT-
    ADDRESS-1A0
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-wait_40us
    COMMENT-
    ADDRESS-1A1
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-1A2
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1A2
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1A2
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Delay of 1ms.
    ADDRESS-1A2
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1A2
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s1, s2
    ADDRESS-1A2
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1A2
      LABEL-delay_1ms
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-19
    COMMENT-;25 x 40us = 1ms
    ADDRESS-1A3
      LABEL-wait_1ms
INSTRUCTION-CALL
   OPERAND1-delay_40us
   OPERAND2-
    COMMENT-
    ADDRESS-1A4
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s2
   OPERAND2-01
    COMMENT-
    ADDRESS-1A5
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-wait_1ms
    COMMENT-
    ADDRESS-1A6
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-1A7
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1A7
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Delay of 20ms.
    ADDRESS-1A7
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1A7
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Delay of 20ms used during initialisation.
    ADDRESS-1A7
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1A7
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s1, s2, s3
    ADDRESS-1A7
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1A7
      LABEL-delay_20ms
INSTRUCTION-LOAD
   OPERAND1-s3
   OPERAND2-14
    COMMENT-;20 x 1ms = 20ms
    ADDRESS-1A8
      LABEL-wait_20ms
INSTRUCTION-CALL
   OPERAND1-delay_1ms
   OPERAND2-
    COMMENT-
    ADDRESS-1A9
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s3
   OPERAND2-01
    COMMENT-
    ADDRESS-1AA
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-wait_20ms
    COMMENT-
    ADDRESS-1AB
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-1AC
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1AC
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Delay of approximately 1 second.
    ADDRESS-1AC
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1AC
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s1, s2, s3, s4
    ADDRESS-1AC
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1AC
      LABEL-delay_1s
INSTRUCTION-LOAD
   OPERAND1-s4
   OPERAND2-32
    COMMENT-;50 x 20ms = 1000ms
    ADDRESS-1AD
      LABEL-wait_1s
INSTRUCTION-CALL
   OPERAND1-delay_20ms
   OPERAND2-
    COMMENT-
    ADDRESS-1AE
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s4
   OPERAND2-01
    COMMENT-
    ADDRESS-1AF
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-wait_1s
    COMMENT-
    ADDRESS-1B0
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-1B1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1B1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1B1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1B1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-1B1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;LCD Character Module Routines
    ADDRESS-1B1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-1B1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1B1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;LCD module is a 16 character by 2 line display but all displays are very similar
    ADDRESS-1B1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The 4-wire data interface will be used (DB4 to DB7).
    ADDRESS-1B1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1B1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The LCD modules are relatively slow and software delay loops are used to slow down
    ADDRESS-1B1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;KCPSM3 adequately for the LCD to communicate. The delay routines are provided in
    ADDRESS-1B1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;a different section (see above in this case).
    ADDRESS-1B1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1B1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1B1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Pulse LCD enable signal 'E' high for greater than 230ns (1us is used).
    ADDRESS-1B1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1B1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Register s4 should define the current state of the LCD output port.
    ADDRESS-1B1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1B1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s4
    ADDRESS-1B1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1B1
      LABEL-LCD_pulse_E
INSTRUCTION-XOR
   OPERAND1-s4
   OPERAND2-LCD_E
    COMMENT-;E=1
    ADDRESS-1B2
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s4
   OPERAND2-LCD_output_port
    COMMENT-
    ADDRESS-1B3
      LABEL-
INSTRUCTION-CALL
   OPERAND1-delay_1us
   OPERAND2-
    COMMENT-
    ADDRESS-1B4
      LABEL-
INSTRUCTION-XOR
   OPERAND1-s4
   OPERAND2-LCD_E
    COMMENT-;E=0
    ADDRESS-1B5
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s4
   OPERAND2-LCD_output_port
    COMMENT-
    ADDRESS-1B6
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-1B7
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1B7
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Write 4-bit instruction to LCD display.
    ADDRESS-1B7
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1B7
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The 4-bit instruction should be provided in the upper 4-bits of register s4.
    ADDRESS-1B7
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Note that this routine does not release the master enable but as it is only
    ADDRESS-1B7
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;used during initialisation and as part of the 8-bit instruction write it
    ADDRESS-1B7
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;should be acceptable.
    ADDRESS-1B7
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1B7
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s4
    ADDRESS-1B7
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1B7
      LABEL-LCD_write_inst4
INSTRUCTION-AND
   OPERAND1-s4
   OPERAND2-F8
    COMMENT-;Enable=1 RS=0 Instruction, RW=0 Write, E=0
    ADDRESS-1B8
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s4
   OPERAND2-LCD_output_port
    COMMENT-;set up RS and RW >40ns before enable pulse
    ADDRESS-1B9
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_pulse_E
   OPERAND2-
    COMMENT-
    ADDRESS-1BA
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-1BB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1BB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1BB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Write 8-bit instruction to LCD display.
    ADDRESS-1BB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1BB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The 8-bit instruction should be provided in register s5.
    ADDRESS-1BB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Instructions are written using the following sequence
    ADDRESS-1BB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Upper nibble
    ADDRESS-1BB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; wait >1us
    ADDRESS-1BB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Lower nibble
    ADDRESS-1BB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; wait >40us
    ADDRESS-1BB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1BB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s1, s4, s5
    ADDRESS-1BB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1BB
      LABEL-LCD_write_inst8
INSTRUCTION-LOAD
   OPERAND1-s4
   OPERAND2-s5
    COMMENT-
    ADDRESS-1BC
      LABEL-
INSTRUCTION-AND
   OPERAND1-s4
   OPERAND2-F0
    COMMENT-;Enable=0 RS=0 Instruction, RW=0 Write, E=0
    ADDRESS-1BD
      LABEL-
INSTRUCTION-OR
   OPERAND1-s4
   OPERAND2-LCD_drive
    COMMENT-;Enable=1
    ADDRESS-1BE
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_inst4
   OPERAND2-
    COMMENT-;write upper nibble
    ADDRESS-1BF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-delay_1us
   OPERAND2-
    COMMENT-;wait >1us
    ADDRESS-1C0
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s4
   OPERAND2-s5
    COMMENT-;select lower nibble with
    ADDRESS-1C1
      LABEL-
INSTRUCTION-SL1
   OPERAND1-s4
   OPERAND2-
    COMMENT-;Enable=1
    ADDRESS-1C2
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s4
   OPERAND2-
    COMMENT-;RS=0 Instruction
    ADDRESS-1C3
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s4
   OPERAND2-
    COMMENT-;RW=0 Write
    ADDRESS-1C4
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s4
   OPERAND2-
    COMMENT-;E=0
    ADDRESS-1C5
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_inst4
   OPERAND2-
    COMMENT-;write lower nibble
    ADDRESS-1C6
      LABEL-
INSTRUCTION-CALL
   OPERAND1-delay_40us
   OPERAND2-
    COMMENT-;wait >40us
    ADDRESS-1C7
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s4
   OPERAND2-F0
    COMMENT-;Enable=0 RS=0 Instruction, RW=0 Write, E=0
    ADDRESS-1C8
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s4
   OPERAND2-LCD_output_port
    COMMENT-;Release master enable
    ADDRESS-1C9
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-1CA
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1CA
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1CA
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1CA
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Write 8-bit data to LCD display.
    ADDRESS-1CA
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1CA
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The 8-bit data should be provided in register s5.
    ADDRESS-1CA
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Data bytes are written using the following sequence
    ADDRESS-1CA
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Upper nibble
    ADDRESS-1CA
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; wait >1us
    ADDRESS-1CA
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Lower nibble
    ADDRESS-1CA
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; wait >40us
    ADDRESS-1CA
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1CA
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s1, s4, s5
    ADDRESS-1CA
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1CA
      LABEL-LCD_write_data
INSTRUCTION-LOAD
   OPERAND1-s4
   OPERAND2-s5
    COMMENT-
    ADDRESS-1CB
      LABEL-
INSTRUCTION-AND
   OPERAND1-s4
   OPERAND2-F0
    COMMENT-;Enable=0 RS=0 Instruction, RW=0 Write, E=0
    ADDRESS-1CC
      LABEL-
INSTRUCTION-OR
   OPERAND1-s4
   OPERAND2-0C
    COMMENT-;Enable=1 RS=1 Data, RW=0 Write, E=0
    ADDRESS-1CD
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s4
   OPERAND2-LCD_output_port
    COMMENT-;set up RS and RW >40ns before enable pulse
    ADDRESS-1CE
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_pulse_E
   OPERAND2-
    COMMENT-;write upper nibble
    ADDRESS-1CF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-delay_1us
   OPERAND2-
    COMMENT-;wait >1us
    ADDRESS-1D0
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s4
   OPERAND2-s5
    COMMENT-;select lower nibble with
    ADDRESS-1D1
      LABEL-
INSTRUCTION-SL1
   OPERAND1-s4
   OPERAND2-
    COMMENT-;Enable=1
    ADDRESS-1D2
      LABEL-
INSTRUCTION-SL1
   OPERAND1-s4
   OPERAND2-
    COMMENT-;RS=1 Data
    ADDRESS-1D3
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s4
   OPERAND2-
    COMMENT-;RW=0 Write
    ADDRESS-1D4
      LABEL-
INSTRUCTION-SL0
   OPERAND1-s4
   OPERAND2-
    COMMENT-;E=0
    ADDRESS-1D5
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s4
   OPERAND2-LCD_output_port
    COMMENT-;set up RS and RW >40ns before enable pulse
    ADDRESS-1D6
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_pulse_E
   OPERAND2-
    COMMENT-;write lower nibble
    ADDRESS-1D7
      LABEL-
INSTRUCTION-CALL
   OPERAND1-delay_40us
   OPERAND2-
    COMMENT-;wait >40us
    ADDRESS-1D8
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s4
   OPERAND2-F0
    COMMENT-;Enable=0 RS=0 Instruction, RW=0 Write, E=0
    ADDRESS-1D9
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s4
   OPERAND2-LCD_output_port
    COMMENT-;Release master enable
    ADDRESS-1DA
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-1DB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1DB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1DB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1DB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1DB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Read 8-bit data from LCD display.
    ADDRESS-1DB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1DB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The 8-bit data will be read from the current LCD memory address
    ADDRESS-1DB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;and will be returned in register s5.
    ADDRESS-1DB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;It is advisable to set the LCD address (cursor position) before
    ADDRESS-1DB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;using the data read for the first time otherwise the display may
    ADDRESS-1DB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;generate invalid data on the first read.
    ADDRESS-1DB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1DB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Data bytes are read using the following sequence
    ADDRESS-1DB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Upper nibble
    ADDRESS-1DB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; wait >1us
    ADDRESS-1DB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Lower nibble
    ADDRESS-1DB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; wait >40us
    ADDRESS-1DB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1DB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s1, s4, s5
    ADDRESS-1DB
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1DB
      LABEL-LCD_read_data8
INSTRUCTION-LOAD
   OPERAND1-s4
   OPERAND2-0E
    COMMENT-;Enable=1 RS=1 Data, RW=1 Read, E=0
    ADDRESS-1DC
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s4
   OPERAND2-LCD_output_port
    COMMENT-;set up RS and RW >40ns before enable pulse
    ADDRESS-1DD
      LABEL-
INSTRUCTION-XOR
   OPERAND1-s4
   OPERAND2-LCD_E
    COMMENT-;E=1
    ADDRESS-1DE
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s4
   OPERAND2-LCD_output_port
    COMMENT-
    ADDRESS-1DF
      LABEL-
INSTRUCTION-CALL
   OPERAND1-delay_1us
   OPERAND2-
    COMMENT-;wait >260ns to access data
    ADDRESS-1E0
      LABEL-
INSTRUCTION-INPUT
   OPERAND1-s5
   OPERAND2-LCD_input_port
    COMMENT-;read upper nibble
    ADDRESS-1E1
      LABEL-
INSTRUCTION-XOR
   OPERAND1-s4
   OPERAND2-LCD_E
    COMMENT-;E=0
    ADDRESS-1E2
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s4
   OPERAND2-LCD_output_port
    COMMENT-
    ADDRESS-1E3
      LABEL-
INSTRUCTION-CALL
   OPERAND1-delay_1us
   OPERAND2-
    COMMENT-;wait >1us
    ADDRESS-1E4
      LABEL-
INSTRUCTION-XOR
   OPERAND1-s4
   OPERAND2-LCD_E
    COMMENT-;E=1
    ADDRESS-1E5
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s4
   OPERAND2-LCD_output_port
    COMMENT-
    ADDRESS-1E6
      LABEL-
INSTRUCTION-CALL
   OPERAND1-delay_1us
   OPERAND2-
    COMMENT-;wait >260ns to access data
    ADDRESS-1E7
      LABEL-
INSTRUCTION-INPUT
   OPERAND1-s0
   OPERAND2-LCD_input_port
    COMMENT-;read lower nibble
    ADDRESS-1E8
      LABEL-
INSTRUCTION-XOR
   OPERAND1-s4
   OPERAND2-LCD_E
    COMMENT-;E=0
    ADDRESS-1E9
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s4
   OPERAND2-LCD_output_port
    COMMENT-
    ADDRESS-1EA
      LABEL-
INSTRUCTION-AND
   OPERAND1-s5
   OPERAND2-F0
    COMMENT-;merge upper and lower nibbles
    ADDRESS-1EB
      LABEL-
INSTRUCTION-SR0
   OPERAND1-s0
   OPERAND2-
    COMMENT-
    ADDRESS-1EC
      LABEL-
INSTRUCTION-SR0
   OPERAND1-s0
   OPERAND2-
    COMMENT-
    ADDRESS-1ED
      LABEL-
INSTRUCTION-SR0
   OPERAND1-s0
   OPERAND2-
    COMMENT-
    ADDRESS-1EE
      LABEL-
INSTRUCTION-SR0
   OPERAND1-s0
   OPERAND2-
    COMMENT-
    ADDRESS-1EF
      LABEL-
INSTRUCTION-OR
   OPERAND1-s5
   OPERAND2-s0
    COMMENT-
    ADDRESS-1F0
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s4
   OPERAND2-04
    COMMENT-;Enable=0 RS=1 Data, RW=0 Write, E=0
    ADDRESS-1F1
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s4
   OPERAND2-LCD_output_port
    COMMENT-;Stop reading 5V device and release master enable
    ADDRESS-1F2
      LABEL-
INSTRUCTION-CALL
   OPERAND1-delay_40us
   OPERAND2-
    COMMENT-;wait >40us
    ADDRESS-1F3
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-1F4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1F4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1F4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Reset and initialise display to communicate using 4-bit data mode
    ADDRESS-1F4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Includes routine to clear the display.
    ADDRESS-1F4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1F4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Requires the 4-bit instructions 3,3,3,2 to be sent with suitable delays
    ADDRESS-1F4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;following by the 8-bit instructions to set up the display.
    ADDRESS-1F4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1F4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;  28 = '001' Function set, '0' 4-bit mode, '1' 2-line, '0' 5x7 dot matrix, 'xx'
    ADDRESS-1F4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;  06 = '000001' Entry mode, '1' increment, '0' no display shift
    ADDRESS-1F4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;  0C = '00001' Display control, '1' display on, '0' cursor off, '0' cursor blink off
    ADDRESS-1F4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;  01 = '00000001' Display clear
    ADDRESS-1F4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1F4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s1, s2, s3, s4
    ADDRESS-1F4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-1F4
      LABEL-LCD_reset
INSTRUCTION-CALL
   OPERAND1-delay_20ms
   OPERAND2-
    COMMENT-;wait more that 15ms for display to be ready
    ADDRESS-1F5
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s4
   OPERAND2-30
    COMMENT-
    ADDRESS-1F6
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_inst4
   OPERAND2-
    COMMENT-;send '3'
    ADDRESS-1F7
      LABEL-
INSTRUCTION-CALL
   OPERAND1-delay_20ms
   OPERAND2-
    COMMENT-;wait >4.1ms
    ADDRESS-1F8
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_inst4
   OPERAND2-
    COMMENT-;send '3'
    ADDRESS-1F9
      LABEL-
INSTRUCTION-CALL
   OPERAND1-delay_1ms
   OPERAND2-
    COMMENT-;wait >100us
    ADDRESS-1FA
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_inst4
   OPERAND2-
    COMMENT-;send '3'
    ADDRESS-1FB
      LABEL-
INSTRUCTION-CALL
   OPERAND1-delay_40us
   OPERAND2-
    COMMENT-;wait >40us
    ADDRESS-1FC
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s4
   OPERAND2-20
    COMMENT-
    ADDRESS-1FD
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_inst4
   OPERAND2-
    COMMENT-;send '2'
    ADDRESS-1FE
      LABEL-
INSTRUCTION-CALL
   OPERAND1-delay_40us
   OPERAND2-
    COMMENT-;wait >40us
    ADDRESS-1FF
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-28
    COMMENT-;Function set
    ADDRESS-200
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_inst8
   OPERAND2-
    COMMENT-
    ADDRESS-201
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-06
    COMMENT-;Entry mode
    ADDRESS-202
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_inst8
   OPERAND2-
    COMMENT-
    ADDRESS-203
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-0C
    COMMENT-;Display control
    ADDRESS-204
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_inst8
   OPERAND2-
    COMMENT-
    ADDRESS-205
      LABEL-LCD_clear
INSTRUCTION-LOAD
   OPERAND1-s5
   OPERAND2-01
    COMMENT-;Display clear
    ADDRESS-206
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_inst8
   OPERAND2-
    COMMENT-
    ADDRESS-207
      LABEL-
INSTRUCTION-CALL
   OPERAND1-delay_1ms
   OPERAND2-
    COMMENT-;wait >1.64ms for display to clear
    ADDRESS-208
      LABEL-
INSTRUCTION-CALL
   OPERAND1-delay_1ms
   OPERAND2-
    COMMENT-
    ADDRESS-209
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-20A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-20A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Position the cursor ready for characters to be written.
    ADDRESS-20A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The display is formed of 2 lines of 16 characters and each
    ADDRESS-20A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;position has a corresponding address as indicated below.
    ADDRESS-20A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-20A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;                   Character position
    ADDRESS-20A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;           0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15
    ADDRESS-20A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-20A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Line 1 - 80 81 82 83 84 85 86 87 88 89 8A 8B 8C 8D 8E 8F
    ADDRESS-20A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Line 2 - C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF
    ADDRESS-20A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-20A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;This routine will set the cursor position using the value provided
    ADDRESS-20A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;in register s5. The upper nibble will define the line and the lower
    ADDRESS-20A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;nibble the character position on the line.
    ADDRESS-20A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Example s5 = 2B will position the cursor on line 2 position 11
    ADDRESS-20A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-20A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Registers used s0, s1, s2, s3, s4
    ADDRESS-20A
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-20A
      LABEL-LCD_cursor
INSTRUCTION-TEST
   OPERAND1-s5
   OPERAND2-10
    COMMENT-;test for line 1
    ADDRESS-20B
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-set_line2
    COMMENT-
    ADDRESS-20C
      LABEL-
INSTRUCTION-AND
   OPERAND1-s5
   OPERAND2-0F
    COMMENT-;make address in range 80 to 8F for line 1
    ADDRESS-20D
      LABEL-
INSTRUCTION-OR
   OPERAND1-s5
   OPERAND2-80
    COMMENT-
    ADDRESS-20E
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_inst8
   OPERAND2-
    COMMENT-;instruction write to set cursor
    ADDRESS-20F
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-210
      LABEL-set_line2
INSTRUCTION-AND
   OPERAND1-s5
   OPERAND2-0F
    COMMENT-;make address in range C0 to CF for line 2
    ADDRESS-211
      LABEL-
INSTRUCTION-OR
   OPERAND1-s5
   OPERAND2-C0
    COMMENT-
    ADDRESS-212
      LABEL-
INSTRUCTION-CALL
   OPERAND1-LCD_write_inst8
   OPERAND2-
    COMMENT-;instruction write to set cursor
    ADDRESS-213
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Interrupt Service Routine (ISR)
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Interrupts occur at 1 second intervals.
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;;;;;;;;;;;;;;;;;;thejas;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; HAVE TO CHANGE FROM 1Hz to XYZkHz.
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;;;;;;;;;;;;;;;;;;thejas;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;;;;;;;;;;;;;;;;;;thejas;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;;;;;;;;;;;;;;;;;;thejas;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Each interrupt is used to take analogue samples and store them in scratch pad memory.
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;The interrupt clears a 'flag' in register sF so that the main program can advance.
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Each interrupt is the fundamental timing trigger used to set the sample rate and
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;it is therefore use to set the D/A outputs by copying the values stored in
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;scratch pad memory and outputting them to the D/A converter using the SPI bus.
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Because the SPI communication is in itself a predictable process, the sample rate
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;is preserved without sample jitter. All variable activities are left to the main
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;program.
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Each time PicoBlaze transmits a 32-bit command word to the D/A converter, the
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;D/A responds with the last command it was sent. So as the end of this service routine
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;the register set [s9,s8,s7,s6] will contain the command which has just been sent
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;for the setting of channel C.
    ADDRESS-214
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-214
      LABEL-ISR
INSTRUCTION-CALL
   OPERAND1-adc_read
   OPERAND2-
    COMMENT-;read A/D Converter
    ADDRESS-215
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s8
   OPERAND2-ADC0_lsb
    COMMENT-;store ADC Channel 0
    ADDRESS-216
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s9
   OPERAND2-ADC0_msb
    COMMENT-
    ADDRESS-217
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-217
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-00
    COMMENT-;clear flag
    ADDRESS-218
      LABEL-
INSTRUCTION-RETURNI
   OPERAND1-ENABLE
   OPERAND2-
    COMMENT-
    ADDRESS-219
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-219
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-219
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-219
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;Interrupt Vector
    ADDRESS-219
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
    ADDRESS-219
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-3FF
      LABEL-
INSTRUCTION-ADDRESS
   OPERAND1-3FF
   OPERAND2-
    COMMENT-
    ADDRESS-3FF
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-ISR
   OPERAND2-
    COMMENT-
    ADDRESS-3FF
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
    ADDRESS-3FF
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
