// -------------------------------------------------------------
//
// Module: filter_ideal
//
// Generated by MATLAB(R) 7.1 and the Filter Design HDL Coder 1.3.
//
// Generated on: 2009-03-21 19:18:18
//
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetLanguage: Verilog
// Name: filter_ideal
// TargetDirectory: Y:\theja\filter_ideal\hdlsrc\fdatool
// ResetType: Sync
// InlineConfigurations: Off
// SafeZeroConcat: Off
// TestBenchStimulus: impulse step ramp chirp noise 
//
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Length     : 11
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// Arithmetic        : fixed
// Numerator         : s16,17 -> [-2.500000e-001 2.500000e-001)
// Input             : s16,16 -> [-5.000000e-001 5.000000e-001)
// Filter Internals  : Specify Precision
//   Output          : s16,16 -> [-5.000000e-001 5.000000e-001)
//   Product         : s16,16 -> [-5.000000e-001 5.000000e-001)
//   Accumulator     : s16,16 -> [-5.000000e-001 5.000000e-001)
//   Round Mode      : convergent
//   Overflow Mode   : wrap
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module filter_ideal 
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [15:0] filter_in; //sfix16_En16
  output  signed [15:0] filter_out; //sfix16_En16

  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [15:0] coeff1 = 16'b1111001101001010; //sfix16_En17
  parameter signed [15:0] coeff2 = 16'b0001100001101101; //sfix16_En17
  parameter signed [15:0] coeff3 = 16'b0010111000010110; //sfix16_En17
  parameter signed [15:0] coeff4 = 16'b0100100100001000; //sfix16_En17
  parameter signed [15:0] coeff5 = 16'b0101111010100000; //sfix16_En17
  parameter signed [15:0] coeff6 = 16'b0110011011010100; //sfix16_En17
  parameter signed [15:0] coeff7 = 16'b0101111010100000; //sfix16_En17
  parameter signed [15:0] coeff8 = 16'b0100100100001000; //sfix16_En17
  parameter signed [15:0] coeff9 = 16'b0010111000010110; //sfix16_En17
  parameter signed [15:0] coeff10 = 16'b0001100001101101; //sfix16_En17
  parameter signed [15:0] coeff11 = 16'b1111001101001010; //sfix16_En17

  // Signals
  reg  signed [15:0] delay_pipeline [0:10] ; // sfix16_En16
  wire signed [15:0] product11; // sfix16_En16
  wire signed [31:0] mul_temp; // sfix32_En33
  wire signed [15:0] product10; // sfix16_En16
  wire signed [31:0] mul_temp_1; // sfix32_En33
  wire signed [15:0] product9; // sfix16_En16
  wire signed [31:0] mul_temp_2; // sfix32_En33
  wire signed [15:0] product8; // sfix16_En16
  wire signed [31:0] mul_temp_3; // sfix32_En33
  wire signed [15:0] product7; // sfix16_En16
  wire signed [31:0] mul_temp_4; // sfix32_En33
  wire signed [15:0] product6; // sfix16_En16
  wire signed [31:0] mul_temp_5; // sfix32_En33
  wire signed [15:0] product5; // sfix16_En16
  wire signed [31:0] mul_temp_6; // sfix32_En33
  wire signed [15:0] product4; // sfix16_En16
  wire signed [31:0] mul_temp_7; // sfix32_En33
  wire signed [15:0] product3; // sfix16_En16
  wire signed [31:0] mul_temp_8; // sfix32_En33
  wire signed [15:0] product2; // sfix16_En16
  wire signed [31:0] mul_temp_9; // sfix32_En33
  wire signed [15:0] product1; // sfix16_En16
  wire signed [31:0] mul_temp_10; // sfix32_En33
  wire signed [15:0] sum1; // sfix16_En16
  wire signed [15:0] add_signext; // sfix16_En16
  wire signed [15:0] add_signext_1; // sfix16_En16
  wire signed [16:0] add_temp; // sfix17_En16
  wire signed [15:0] sum2; // sfix16_En16
  wire signed [15:0] add_signext_2; // sfix16_En16
  wire signed [15:0] add_signext_3; // sfix16_En16
  wire signed [16:0] add_temp_1; // sfix17_En16
  wire signed [15:0] sum3; // sfix16_En16
  wire signed [15:0] add_signext_4; // sfix16_En16
  wire signed [15:0] add_signext_5; // sfix16_En16
  wire signed [16:0] add_temp_2; // sfix17_En16
  wire signed [15:0] sum4; // sfix16_En16
  wire signed [15:0] add_signext_6; // sfix16_En16
  wire signed [15:0] add_signext_7; // sfix16_En16
  wire signed [16:0] add_temp_3; // sfix17_En16
  wire signed [15:0] sum5; // sfix16_En16
  wire signed [15:0] add_signext_8; // sfix16_En16
  wire signed [15:0] add_signext_9; // sfix16_En16
  wire signed [16:0] add_temp_4; // sfix17_En16
  wire signed [15:0] sum6; // sfix16_En16
  wire signed [15:0] add_signext_10; // sfix16_En16
  wire signed [15:0] add_signext_11; // sfix16_En16
  wire signed [16:0] add_temp_5; // sfix17_En16
  wire signed [15:0] sum7; // sfix16_En16
  wire signed [15:0] add_signext_12; // sfix16_En16
  wire signed [15:0] add_signext_13; // sfix16_En16
  wire signed [16:0] add_temp_6; // sfix17_En16
  wire signed [15:0] sum8; // sfix16_En16
  wire signed [15:0] add_signext_14; // sfix16_En16
  wire signed [15:0] add_signext_15; // sfix16_En16
  wire signed [16:0] add_temp_7; // sfix17_En16
  wire signed [15:0] sum9; // sfix16_En16
  wire signed [15:0] add_signext_16; // sfix16_En16
  wire signed [15:0] add_signext_17; // sfix16_En16
  wire signed [16:0] add_temp_8; // sfix17_En16
  wire signed [15:0] sum10; // sfix16_En16
  wire signed [15:0] add_signext_18; // sfix16_En16
  wire signed [15:0] add_signext_19; // sfix16_En16
  wire signed [16:0] add_temp_9; // sfix17_En16
  reg  signed [15:0] output_register; // sfix16_En16

  // Block Statements
  always @( posedge clk)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= filter_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
        end
      end
    end // Delay_Pipeline_process


  assign mul_temp = delay_pipeline[10] * coeff11;
  assign product11 = ({{1{mul_temp[31]}}, mul_temp[31:0]} + {mul_temp[17], {16{~mul_temp[17]}}})>>>17;

  assign mul_temp_1 = delay_pipeline[9] * coeff10;
  assign product10 = ({{1{mul_temp_1[31]}}, mul_temp_1[31:0]} + {mul_temp_1[17], {16{~mul_temp_1[17]}}})>>>17;

  assign mul_temp_2 = delay_pipeline[8] * coeff9;
  assign product9 = ({{1{mul_temp_2[31]}}, mul_temp_2[31:0]} + {mul_temp_2[17], {16{~mul_temp_2[17]}}})>>>17;

  assign mul_temp_3 = delay_pipeline[7] * coeff8;
  assign product8 = ({{1{mul_temp_3[31]}}, mul_temp_3[31:0]} + {mul_temp_3[17], {16{~mul_temp_3[17]}}})>>>17;

  assign mul_temp_4 = delay_pipeline[6] * coeff7;
  assign product7 = ({{1{mul_temp_4[31]}}, mul_temp_4[31:0]} + {mul_temp_4[17], {16{~mul_temp_4[17]}}})>>>17;

  assign mul_temp_5 = delay_pipeline[5] * coeff6;
  assign product6 = ({{1{mul_temp_5[31]}}, mul_temp_5[31:0]} + {mul_temp_5[17], {16{~mul_temp_5[17]}}})>>>17;

  assign mul_temp_6 = delay_pipeline[4] * coeff5;
  assign product5 = ({{1{mul_temp_6[31]}}, mul_temp_6[31:0]} + {mul_temp_6[17], {16{~mul_temp_6[17]}}})>>>17;

  assign mul_temp_7 = delay_pipeline[3] * coeff4;
  assign product4 = ({{1{mul_temp_7[31]}}, mul_temp_7[31:0]} + {mul_temp_7[17], {16{~mul_temp_7[17]}}})>>>17;

  assign mul_temp_8 = delay_pipeline[2] * coeff3;
  assign product3 = ({{1{mul_temp_8[31]}}, mul_temp_8[31:0]} + {mul_temp_8[17], {16{~mul_temp_8[17]}}})>>>17;

  assign mul_temp_9 = delay_pipeline[1] * coeff2;
  assign product2 = ({{1{mul_temp_9[31]}}, mul_temp_9[31:0]} + {mul_temp_9[17], {16{~mul_temp_9[17]}}})>>>17;

  assign mul_temp_10 = delay_pipeline[0] * coeff1;
  assign product1 = ({{1{mul_temp_10[31]}}, mul_temp_10[31:0]} + {mul_temp_10[17], {16{~mul_temp_10[17]}}})>>>17;

  assign add_signext = product1;
  assign add_signext_1 = product2;
  assign add_temp = add_signext + add_signext_1;
  assign sum1 = add_temp[15:0];

  assign add_signext_2 = sum1;
  assign add_signext_3 = product3;
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign sum2 = add_temp_1[15:0];

  assign add_signext_4 = sum2;
  assign add_signext_5 = product4;
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign sum3 = add_temp_2[15:0];

  assign add_signext_6 = sum3;
  assign add_signext_7 = product5;
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign sum4 = add_temp_3[15:0];

  assign add_signext_8 = sum4;
  assign add_signext_9 = product6;
  assign add_temp_4 = add_signext_8 + add_signext_9;
  assign sum5 = add_temp_4[15:0];

  assign add_signext_10 = sum5;
  assign add_signext_11 = product7;
  assign add_temp_5 = add_signext_10 + add_signext_11;
  assign sum6 = add_temp_5[15:0];

  assign add_signext_12 = sum6;
  assign add_signext_13 = product8;
  assign add_temp_6 = add_signext_12 + add_signext_13;
  assign sum7 = add_temp_6[15:0];

  assign add_signext_14 = sum7;
  assign add_signext_15 = product9;
  assign add_temp_7 = add_signext_14 + add_signext_15;
  assign sum8 = add_temp_7[15:0];

  assign add_signext_16 = sum8;
  assign add_signext_17 = product10;
  assign add_temp_8 = add_signext_16 + add_signext_17;
  assign sum9 = add_temp_8[15:0];

  assign add_signext_18 = sum9;
  assign add_signext_19 = product11;
  assign add_temp_9 = add_signext_18 + add_signext_19;
  assign sum10 = add_temp_9[15:0];

  always @ ( posedge clk)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= sum10;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // filter_ideal
