;;============================================================================
;; File: software.psm
;; This is the PicoBlaze program for EE178 Lab #3.
;; Thanks to Ken Chapman of Xilinx for the LCD routines used here.
;;============================================================================

;;============================================================================
;; Port address declarations.
;;============================================================================

CONSTANT lcd_dout         , 00    ; port for 8-bit lcd data out
CONSTANT lcd_ctrl         , 01    ; port for lcd control
CONSTANT led_dout         , 02    ; port for 8-bit led data out
CONSTANT switches         , 03    ; port for 8-bit switch input

;;============================================================================
;; Other useful constants.
;;============================================================================

CONSTANT lcd_e            , 01    ; active high enable
CONSTANT lcd_rw           , 02    ; read = 1, write = 0
CONSTANT lcd_rs           , 04    ; instruction = 0, data = 1

;; Constant to define a software delay of 1us. This must be adjusted
;; to reflect the clock period. Every instruction executes in 2 cycles.
;; delay_1us_constant = (clock_rate - 6)/4, where 'clock_rate' is in
;; MHz.  Example: For 50MHz clock the constant value is (50-6)/4 = 11.

CONSTANT delay_1us_const  , 0B    ; delay 1 us value

;; Define constants for all the ascii values.

CONSTANT ascii_SPACE      , 20    ; ascii code
CONSTANT ascii_EXCLAIM    , 21    ; ascii code
CONSTANT ascii_DBLQUOT    , 22    ; ascii code
CONSTANT ascii_NUMSIGN    , 23    ; ascii code
CONSTANT ascii_DOLLAR     , 24    ; ascii code
CONSTANT ascii_PERCENT    , 25    ; ascii code
CONSTANT ascii_AMP        , 26    ; ascii code
CONSTANT ascii_SINQUOT    , 27    ; ascii code
CONSTANT ascii_LPAREN     , 28    ; ascii code
CONSTANT ascii_RPAREN     , 29    ; ascii code
CONSTANT ascii_ASTERISK   , 2A    ; ascii code
CONSTANT ascii_PLUS       , 2B    ; ascii code
CONSTANT ascii_COMMA      , 2C    ; ascii code
CONSTANT ascii_MINUS      , 2D    ; ascii code
CONSTANT ascii_PERIOD     , 2E    ; ascii code
CONSTANT ascii_FWDSLASH   , 2F    ; ascii code

CONSTANT ascii_0          , 30    ; ascii code
CONSTANT ascii_1          , 31    ; ascii code
CONSTANT ascii_2          , 32    ; ascii code
CONSTANT ascii_3          , 33    ; ascii code
CONSTANT ascii_4          , 34    ; ascii code
CONSTANT ascii_5          , 35    ; ascii code
CONSTANT ascii_6          , 36    ; ascii code
CONSTANT ascii_7          , 37    ; ascii code
CONSTANT ascii_8          , 38    ; ascii code
CONSTANT ascii_9          , 39    ; ascii code
CONSTANT ascii_COLON      , 3A    ; ascii code
CONSTANT ascii_SEMI       , 3B    ; ascii code
CONSTANT ascii_LESS       , 3C    ; ascii code
CONSTANT ascii_EQUAL      , 3D    ; ascii code
CONSTANT ascii_GREATER    , 3E    ; ascii code
CONSTANT ascii_QUESTION   , 3F    ; ascii code

CONSTANT ascii_CIRCAT     , 40    ; ascii code
CONSTANT ascii_A          , 41    ; ascii code
CONSTANT ascii_B          , 42    ; ascii code
CONSTANT ascii_C          , 43    ; ascii code
CONSTANT ascii_D          , 44    ; ascii code
CONSTANT ascii_E          , 45    ; ascii code
CONSTANT ascii_F          , 46    ; ascii code
CONSTANT ascii_G          , 47    ; ascii code
CONSTANT ascii_H          , 48    ; ascii code
CONSTANT ascii_I          , 49    ; ascii code
CONSTANT ascii_J          , 4A    ; ascii code
CONSTANT ascii_K          , 4B    ; ascii code
CONSTANT ascii_L          , 4C    ; ascii code
CONSTANT ascii_M          , 4D    ; ascii code
CONSTANT ascii_N          , 4E    ; ascii code
CONSTANT ascii_O          , 4F    ; ascii code

CONSTANT ascii_P          , 50    ; ascii code
CONSTANT ascii_Q          , 51    ; ascii code
CONSTANT ascii_R          , 52    ; ascii code
CONSTANT ascii_S          , 53    ; ascii code
CONSTANT ascii_T          , 54    ; ascii code
CONSTANT ascii_U          , 55    ; ascii code
CONSTANT ascii_V          , 56    ; ascii code
CONSTANT ascii_W          , 57    ; ascii code
CONSTANT ascii_X          , 58    ; ascii code
CONSTANT ascii_Y          , 59    ; ascii code
CONSTANT ascii_Z          , 5A    ; ascii code
CONSTANT ascii_LBKT       , 5B    ; ascii code
CONSTANT ascii_BKSLASH    , 5C    ; ascii code
CONSTANT ascii_RBKT       , 5D    ; ascii code
CONSTANT ascii_CARET      , 5E    ; ascii code
CONSTANT ascii_DASH       , 5F    ; ascii code

CONSTANT ascii_TICK       , 60    ; ascii code
CONSTANT ascii_a          , 61    ; ascii code
CONSTANT ascii_b          , 62    ; ascii code
CONSTANT ascii_c          , 63    ; ascii code
CONSTANT ascii_d          , 64    ; ascii code
CONSTANT ascii_e          , 65    ; ascii code
CONSTANT ascii_f          , 66    ; ascii code
CONSTANT ascii_g          , 67    ; ascii code
CONSTANT ascii_h          , 68    ; ascii code
CONSTANT ascii_i          , 69    ; ascii code
CONSTANT ascii_j          , 6A    ; ascii code
CONSTANT ascii_k          , 6B    ; ascii code
CONSTANT ascii_l          , 6C    ; ascii code
CONSTANT ascii_m          , 6D    ; ascii code
CONSTANT ascii_n          , 6E    ; ascii code
CONSTANT ascii_o          , 6F    ; ascii code

CONSTANT ascii_p          , 70    ; ascii code
CONSTANT ascii_q          , 71    ; ascii code
CONSTANT ascii_r          , 72    ; ascii code
CONSTANT ascii_s          , 73    ; ascii code
CONSTANT ascii_t          , 74    ; ascii code
CONSTANT ascii_u          , 75    ; ascii code
CONSTANT ascii_v          , 76    ; ascii code
CONSTANT ascii_w          , 77    ; ascii code
CONSTANT ascii_x          , 78    ; ascii code
CONSTANT ascii_y          , 79    ; ascii code
CONSTANT ascii_z          , 7A    ; ascii code
CONSTANT ascii_LBRACE     , 7B    ; ascii code
CONSTANT ascii_VBAR       , 7C    ; ascii code
CONSTANT ascii_RBRACE     , 7D    ; ascii code
CONSTANT ascii_TILDE      , 7E    ; ascii code
CONSTANT ascii_ULINE      , 7F    ; ascii code

;;============================================================================
;; Infinite loop.
;;============================================================================

      cold_start: LOAD s0, 00                         ; clear value
                  OUTPUT s0, lcd_dout                 ; clear dout
                  OUTPUT s0, lcd_ctrl                 ; clear ctrl
                  OUTPUT s0, led_dout                 ; clear leds

                  CALL lcd_reset_4bit                 ; initialize the lcd
                  LOAD s5, 10                         ; load cursor position
                  CALL lcd_cursor4                    ; set cursor position
                  CALL disp4bit_msg1                  ; display message 1
                  LOAD s5, 20                         ; load cursor position
                  CALL lcd_cursor4                    ; set cursor position
                  CALL disp4bit_msg2                  ; display message 2

            loop: JUMP loop                           ; add your code here

;;============================================================================
;; Message routines for 4-bit test.
;;============================================================================

   disp4bit_msg1: LOAD s5, ascii_S
                  CALL ram8_as_4bit
                  LOAD s5, ascii_J
                  CALL ram8_as_4bit
                  LOAD s5, ascii_S
                  CALL ram8_as_4bit
                  LOAD s5, ascii_U
                  CALL ram8_as_4bit
                  LOAD s5, ascii_SPACE
                  CALL ram8_as_4bit
                  LOAD s5, ascii_E
                  CALL ram8_as_4bit
                  LOAD s5, ascii_E
                  CALL ram8_as_4bit
                  LOAD s5, ascii_1
                  CALL ram8_as_4bit
                  LOAD s5, ascii_7
                  CALL ram8_as_4bit
                  LOAD s5, ascii_8
                  CALL ram8_as_4bit
                  LOAD s5, ascii_SPACE
                  CALL ram8_as_4bit
                  LOAD s5, ascii_L
                  CALL ram8_as_4bit
                  LOAD s5, ascii_a
                  CALL ram8_as_4bit
                  LOAD s5, ascii_b
                  CALL ram8_as_4bit
                  LOAD s5, ascii_SPACE
                  CALL ram8_as_4bit
                  LOAD s5, ascii_3
                  CALL ram8_as_4bit
                  RETURN

   disp4bit_msg2: LOAD s5, ascii_E
                  CALL ram8_as_4bit
                  LOAD s5, ascii_r
                  CALL ram8_as_4bit
                  LOAD s5, ascii_i
                  CALL ram8_as_4bit
                  LOAD s5, ascii_c
                  CALL ram8_as_4bit
                  LOAD s5, ascii_SPACE
                  CALL ram8_as_4bit
                  LOAD s5, ascii_J
                  CALL ram8_as_4bit
                  LOAD s5, ascii_a
                  CALL ram8_as_4bit
                  LOAD s5, ascii_y
                  CALL ram8_as_4bit
                  LOAD s5, ascii_SPACE
                  CALL ram8_as_4bit
                  LOAD s5, ascii_C
                  CALL ram8_as_4bit
                  LOAD s5, ascii_r
                  CALL ram8_as_4bit
                  LOAD s5, ascii_a
                  CALL ram8_as_4bit
                  LOAD s5, ascii_b
                  CALL ram8_as_4bit
                  LOAD s5, ascii_i
                  CALL ram8_as_4bit
                  LOAD s5, ascii_l
                  CALL ram8_as_4bit
                  LOAD s5, ascii_l
                  CALL ram8_as_4bit
                  RETURN

;;============================================================================
;; Delay routines.
;;============================================================================

       delay_1us: LOAD s0, delay_1us_const
        wait_1us: SUB s0, 01
                  JUMP NZ, wait_1us
                  RETURN
      delay_40us: LOAD s1, 28                         ; 40 x 1us = 40us
       wait_40us: CALL delay_1us
                  SUB s1, 01
                  JUMP NZ, wait_40us
                  RETURN
       delay_1ms: LOAD s2, 19                         ; 25 x 40us = 1ms
        wait_1ms: CALL delay_40us
                  SUB s2, 01
                  JUMP NZ, wait_1ms
                  RETURN
      delay_20ms: LOAD s3, 14                         ; 20 x 1ms = 20ms
       wait_20ms: CALL delay_1ms
                  SUB s3, 01
                  JUMP NZ, wait_20ms
                  RETURN

;;============================================================================
;; lcd_reset_4bit
;;============================================================================

                  ;; Reset and initialize display in 4-bit mode.
                  ;;
                  ;; Requires 4-bit instructions 3, 3, 3, 2 to be sent
                  ;; with delays followed by the instructions to set up
                  ;; the display.  Registers used: s0, s1, s2, s3, s4.
                  ;;
  lcd_reset_4bit: CALL delay_20ms                     ; wait >15ms
                  LOAD s4, 30
                  CALL lcd_write_reg                  ; send '3X'
                  CALL delay_20ms                     ; wait >4.1ms
                  LOAD s4, 30
                  CALL lcd_write_reg                  ; send '3X'
                  CALL delay_1ms                      ; wait >100us
                  LOAD s4, 30
                  CALL lcd_write_reg                  ; send '3X'
                  CALL delay_40us                     ; wait >40us
                  LOAD s4, 20
                  CALL lcd_write_reg                  ; send '2X'
                  CALL delay_40us                     ; wait >40us
                  ;;
                  ;; Function set = 0 0 1 W N F X X where:
                  ;; W = interface width, 1 --> 8 bit, 0 --> 4 bit
                  ;; N = number of lines, 1 --> 2 lines, 0 -- > 1 line
                  ;; F = font size, 1 --> 5x11, 0 --> 5x7
                  ;; X = don't care, use zero
                  ;;
                  ;; To set up the display in 4-bit mode, we want:
                  ;; W = 0, N = 1, F = 0 --> Function set = 28h
                  ;;
                  LOAD s5, 28                         ; function set
                  CALL reg8_as_4bit
                  ;;
                  ;; Entry Mode set = 0 0 0 0 1 I S
                  ;; I = increment, 1 --> increment, 0 --> no increment
                  ;; S = shift, 1 --> shift, 0 --> no shift
                  ;;
                  ;; To set up increment but not shift, we want:
                  ;; I = 1, S = 0 --> Entry Mode set = 06h
                  ;;
                  LOAD s5, 06                         ; entry mode
                  CALL reg8_as_4bit
                  ;;
                  ;; Display Control set = 0 0 0 0 1 D C B
                  ;; D = display on, 1 --> on, 0 --> off
                  ;; C = cursor on, 1 --> on, 0 --> off
                  ;; B = cursor blink, 1 --> on, 0 --> off
                  ;;
                  ;; To turn on the display with no cursor, we want:
                  ;; D = 1, C = 0, B = 0 --> Display Control set = 0Ch
                  ;;
                  LOAD s5, 0C                         ; display control
                  CALL reg8_as_4bit
                  ;;
                  ;; Display Clear command = 01h
                  ;;
                  LOAD s5, 01                         ; display clear
                  CALL reg8_as_4bit
                  CALL delay_1ms                      ; wait >1.64ms
                  CALL delay_1ms
                  ;;
                  RETURN

;;============================================================================
;; Subroutine to pulse the enable for greater than 230 ns.  Assumes s4
;; contains the current state of the lcd control port.
;;============================================================================

     lcd_pulse_e: XOR s4, lcd_e                       ; toggle E
                  OUTPUT s4, lcd_ctrl
                  CALL delay_1us
                  XOR s4, lcd_e                       ; toggle E
                  OUTPUT s4, lcd_ctrl
                  RETURN

;;============================================================================
;; Subroutine to perform a reg write.  Data is passed through s4.
;;============================================================================

   lcd_write_reg: OUTPUT s4, lcd_dout                 ; write data
                  LOAD s4, 00                         ; RS = 0, RW = 0, E = 0
                  CALL lcd_pulse_e                    ; strobe upper nibble
                  LOAD s4, 00                         ; clear value
                  OUTPUT s4, lcd_dout                 ; clear dout
                  OUTPUT s4, lcd_ctrl                 ; clear ctrl
                  RETURN

;;============================================================================
;; Subroutine to perform a ram write.  Data is passed through s4.
;;============================================================================

   lcd_write_ram: OUTPUT s4, lcd_dout                 ; write data
                  LOAD s4, 04                         ; RS = 1, RW = 0, E = 0
                  CALL lcd_pulse_e                    ; strobe upper nibble
                  LOAD s4, 00                         ; clear value
                  OUTPUT s4, lcd_dout                 ; clear dout
                  OUTPUT s4, lcd_ctrl                 ; clear ctrl
                  RETURN

;;============================================================================
;; reg8_as_4bit
;;============================================================================

                  ;; The 8-bit instruction should be provided in register s5.
                  ;; Instructions are written using the following sequence:
                  ;;
                  ;; Upper nibble
                  ;; wait >1us
                  ;; Lower nibble
                  ;; wait >40us
                  ;;
                  ;; Registers used s0, s1, s4, s5

    reg8_as_4bit: LOAD s4, s5                         ; copy data into s4
                  CALL lcd_write_reg                  ; write upper nibble
                  CALL delay_1us                      ; wait >1us
                  LOAD s4, s5                         ; copy data into s4
                  SL0 s4                              ; rotate low nibble
                  SL0 s4                              ; into high nibble
                  SL0 s4                              ; position to prepare
                  SL0 s4                              ; for writing (masked)
                  CALL lcd_write_reg                  ; write lower nibble
                  CALL delay_40us                     ; wait >40us
                  RETURN

;;============================================================================
;; ram8_as_4bit
;;============================================================================

                  ;; The 8-bit data should be provided in register s5.
                  ;; Instructions are written using the following sequence:
                  ;;
                  ;; Upper nibble
                  ;; wait >1us
                  ;; Lower nibble
                  ;; wait >40us
                  ;;
                  ;; Registers used s0, s1, s4, s5

    ram8_as_4bit: LOAD s4, s5                         ; copy data into s4
                  CALL lcd_write_ram                  ; write upper nibble
                  CALL delay_1us                      ; wait >1us
                  LOAD s4, s5                         ; copy data into s4
                  SL0 s4                              ; rotate low nibble
                  SL0 s4                              ; into high nibble
                  SL0 s4                              ; position to prepare
                  SL0 s4                              ; for writing (masked)
                  CALL lcd_write_ram                  ; write lower nibble
                  CALL delay_40us                     ; wait >40us
                  RETURN

;;============================================================================
;; lcd_cursor4
;;============================================================================

                  ;; Position the cursor ready for characters to be written.
                  ;; The display is formed of 2 lines of 16 characters and each
                  ;; position has a corresponding address as indicated below.
                  ;;
                  ;;                   Character position
                  ;;           0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15
                  ;;
                  ;; Line 1 - 80 81 82 83 84 85 86 87 88 89 8A 8B 8C 8D 8E 8F
                  ;; Line 2 - C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF
                  ;;
                  ;; This routine will set the cursor position using the value
                  ;; provided in register s5. The upper nibble will define the
                  ;; line and the lower nibble the character position on the
                  ;; line.
                  ;;
                  ;; Registers used s0, s1, s2, s3, s4

     lcd_cursor4: TEST s5, 10                         ; test for line 1
                  JUMP Z, sl2_4
                  AND s5, 0F                          ; make address in range
                  OR s5, 80                           ; 80 to 8F for line 1
                  CALL reg8_as_4bit                   ; instruction write
                  RETURN
           sl2_4: AND s5, 0F                          ; make address in range
                  OR s5, C0                           ; C0 to CF for line 2
                  CALL reg8_as_4bit                   ; instruction write
                  RETURN

;;============================================================================
;;
;;============================================================================